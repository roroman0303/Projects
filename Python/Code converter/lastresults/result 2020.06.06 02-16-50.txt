#Было убрано объявление библиотеки:
# #include <iostream>
#Ввод-вывод в Python реализуется функциями input() и print().

#Было убрано объявление библиотеки:
# #include <string>
#В Python строки доступны по умолчанию.

#Строка была убрана:
# using namespace std;

#Было преобразовано объявление функции:
# float twoDimMatrixCreator (int row_count, int col_count) 
#Функция twoDimMatrixCreator с возвращаемым значением типа float
def twoDimMatrixCreator( row_count,  col_count) :

#Был обнаружен ссылочный тип данных:
#     float** element = new float*[row_count]; 
#В Python ссылочные типы данных не предусмотрены

#Был преобразован цикл:
#     for (int i = 0; i < row_count; i++) 
#Цикл со счетчиком i от 0 до row_count
    for i in range(0, row_count):

#Не было преобразовано:
#         element[i] = new float[col_count];
#Внимание - выделение динамической памяти!
#В Python нет механизма выделения дин. памяти.

#Был преобразован оператор возврата:
#     return element;
    return element

#Было преобразовано объявление класса:
# class Matrix : public human
#Класс Matrix, наследуемый от класса human
class Matrix(human):

#Оператор управления доступом был убран:
#     private:
#В Python механизм инкапсуляции не предусмотрен

#Было преобразовано объявление переменных:
#         int row_count;
#В Python присутствует динамическая типизация
#Нет необходимости объявлять переменные заранее

#Было преобразовано объявление переменных:
#         int col_count;
#В Python присутствует динамическая типизация
#Нет необходимости объявлять переменные заранее

#Оператор управления доступом был убран:
#     public:
#В Python механизм инкапсуляции не предусмотрен

#Был обнаружен ссылочный тип данных:
#         float** element;
#В Python ссылочные типы данных не предусмотрены

#Был преобразован конструктор класса:
#         Matrix (int row_count, int col_count)
#Конструктор класса Matrix
        def __init__(self,  row_count,  col_count)

#Была преобразована операция присвоения:
#             this->row_count = row_count;
#Объекту this->row_count было присвоено значение row_count
            self.row_count = row_count

#Была преобразована операция присвоения:
#             this->col_count = col_count;
#Объекту this->col_count было присвоено значение col_count
            self.col_count = col_count

#Была преобразована операция присвоения:
#             this->element = twoDimMatrixCreator(row_count, col_count);
#Объекту this->element было присвоено значение twoDimMatrixCreator(row_count,col_count)
            self.element = twoDimMatrixCreator(row_count, col_count)

#Было преобразовано объявление функции:
#         int getRow_count () 
#Функция getRow_count с возвращаемым значением типа int
        def getRow_count() :

#Был преобразован оператор возврата:
#             return this->row_count;
            return self.row_count

#Было преобразовано объявление функции:
#         int getCol_count () 
#Функция getCol_count с возвращаемым значением типа int
        def getCol_count() :

#Был преобразован оператор возврата:
#             return this->col_count;
            return self.col_count

#Было преобразовано объявление функции:
# int main()
#Начало главной исполняемой программы
main()
def main():

#Было преобразовано объявление переменных:
#     double a, b, c; 
#В Python присутствует динамическая типизация
#Нет необходимости объявлять переменные заранее

#Было преобразовано объявление переменных:
#     int counter = 1;
#В Python присутствует динамическая типизация
    counter = 1

#Был преобразован консольный ввод:
#     cin >> a >> b >> c;
    input( a , b , c)

#Был преобразован цикл:
#     for (int i = 0; i < matrix1.getRow_count(); i++)
#Цикл со счетчиком i от 0 до matrix1.getRow_count()
    for i in range(0, matrix1.getRow_count()):

#Был преобразован цикл:
#         for (int j = 0; j < matrix1.getCol_count(); j++) 
#Цикл со счетчиком j от 0 до matrix1.getCol_count()
        for j in range(0, matrix1.getCol_count()):

#Была преобразована операция присвоения:
#             matrix1.element[i][j] = counter++; 
#Объекту matrix1.element[i][j] было присвоено значение counter++
            matrix1.element[i][j] = counter++#ВНИМАНИЕ ИНКРЕМЕНТ 

#Был преобразован цикл:
#     for (int i = 0; i < matrix2.getRow_count(); i++) 
#Цикл со счетчиком i от 0 до matrix2.getRow_count()
    for i in range(0, matrix2.getRow_count()):

#Был преобразован цикл:
#         for (int j = 0; j < matrix2.getCol_count(); j++) 
#Цикл со счетчиком j от 0 до matrix2.getCol_count()
        for j in range(0, matrix2.getCol_count()):

#Была преобразована операция присвоения:
#             matrix2.element[i][j] = --counter; 
#Объекту matrix2.element[i][j] было присвоено значение --counter
            matrix2.element[i][j] = --#ВНИМАНИЕ ДЕКРЕМЕНТcounter 

#Был преобразован цикл:
#     for (int i = 0; i < matrix3.getRow_count(); i++) 
#Цикл со счетчиком i от 0 до matrix3.getRow_count()
    for i in range(0, matrix3.getRow_count()):

#Был преобразован цикл:
#         for (int j = 0; j < matrix3.getCol_count(); j++) 
#Цикл со счетчиком j от 0 до matrix3.getCol_count()
        for j in range(0, matrix3.getCol_count()):

#Была преобразована операция присвоения:
#             matrix3.element[i][j] = 1; 
#Объекту matrix3.element[i][j] было присвоено значение 1
            matrix3.element[i][j] = 1 

#Был преобразован консольный вывод:
#     cout << matrix1;
    print( matrix1)

#Был преобразован консольный вывод:
#     cout << matrix2; 
    print( matrix2 )

#Был преобразован консольный вывод:
#     cout << matrix3;
    print( matrix3)

#Был преобразован консольный вывод:
#     cout << "mystr test";
    print( "mystr test")

#Был преобразован консольный вывод:
#     cout << "my STR testing"
    print( "my STR testing")

#Был преобразован оператор возврата:
#     return 0;
#Конец исполняемой программы
    return 0

