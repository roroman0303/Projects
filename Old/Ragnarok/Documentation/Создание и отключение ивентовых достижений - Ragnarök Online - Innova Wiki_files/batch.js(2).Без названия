try {
/* module-key = 'confluence.extra.jira:jirachart-resources', location = '/jirachart/jirachart.js' */
AJS.toInit(function(){AJS.$(".jira-chart-macro-img").load(function(a){AJS.log("Jira Chart Macro - chart image loaded");AJS.$(".insert-jira-chart-macro-button",window.parent.document).enable()}).error(function(d){AJS.log("Jira Chart Macro - chart image loaded error");AJS.$(".insert-jira-chart-macro-button",window.parent.document).disable();var e=AJS.$(d.target);var c=e.parent();var b=c.parent();c.remove();var a="Unable to render JIRA chart macro due to an execution error.";AJS.messages.error(b,{body:a})})});
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'confluence.extra.jira:jirachart-resources', location = '/jirachart/twodimensionalchart-showlink.js' */
var TwoDimensionalShowLink=(function(e){var d=function(i){var h=e("#two-dimensional-chart-"+i);var g=h.position();e("<div />",{id:"twodimensional-dark-layout-"+i,"class":"jim-sortable-dark-layout",css:{top:g.top+"px",left:g.left+"px",width:h.width()+"px",height:h.height()+"px"}}).appendTo(h.parent())};var a=function(g){e("#twodimensional-dark-layout-"+g).remove()};var b=function(){var h=e(this).attr("data-chart-id");d(h);var g={pageId:e("#chart-page-id-"+h).val(),wikiMarkup:e("#chart-wiki-"+h).val(),isShowMore:e(this).attr("data-is-show-more")};AJS.$.ajax({type:"POST",dataType:"html",url:Confluence.getContextPath()+"/plugins/servlet/twoDimensionalShowMoreRenderer",data:g,success:function(i){if(e(i).find(".aui-message.error").length){var j=e(i).find(".message").text();e("#two-dimensional-chart-"+h).find(".show-error").html(j)}else{var k=e(i).find(".show-link-container a").attr("data-chart-id");e("#two-dimensional-chart-"+h).replaceWith(i);c(k)}a(h)},error:function(){e("#two-dimensional-chart-"+h).find(".show-error").html("Unable to render JIRA chart macro. Execution has timed out.");a(h)}})};var c=function(g){e("#show-link-"+g).on("click",b)};var f=function(){e(".show-link-container a").each(function(){c(e(this).attr("data-chart-id"))})};return{init:f}})(AJS.$);AJS.$(function(){TwoDimensionalShowLink.init()});
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.atlassian.confluence.plugins.share-page:mail-page-resources', location = 'templates/sharepage/share-dialog.soy' */
// This file was automatically generated from share-dialog.soy.
// Please don't edit this file by hand.

if (typeof Confluence == 'undefined') { var Confluence = {}; }
if (typeof Confluence.Templates == 'undefined') { Confluence.Templates = {}; }
if (typeof Confluence.Templates.Share == 'undefined') { Confluence.Templates.Share = {}; }
if (typeof Confluence.Templates.Share.Dialog == 'undefined') { Confluence.Templates.Share.Dialog = {}; }


Confluence.Templates.Share.Dialog.shareContentPopup = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<form action="#" method="post" class="aui share-content-popup"><div class="field-group"><div class="autocomplete-user-target"><input class="text autocomplete-sharepage" id="users" data-max="10" data-dropdown-target=".autocomplete-user-target" data-none-message="', soy.$$escapeHtml("\u041d\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0439"), '" placeholder="', soy.$$escapeHtml("\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0433\u0440\u0443\u043f\u043f\u0430 \u0438\u043b\u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430"), '"/></div><ol class="recipients"></ol></div><div class="field-group"><textarea class="textarea" id="note" placeholder="', soy.$$escapeHtml("\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435"), '"/></div><div class="field-group button-panel"><div class="progress-messages-icon"></div><div class="progress-messages"></div><input class="button submit" type="submit" value="', soy.$$escapeHtml("\u041f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f"), '" disabled/><a class="close-dialog" href="#">', soy.$$escapeHtml("\u041e\u0442\u043c\u0435\u043d\u0438\u0442\u044c"), '</a></div></form>');
  return opt_sb ? '' : output.toString();
};


Confluence.Templates.Share.Dialog.recipientUser = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<li data-userkey="', soy.$$escapeHtml(opt_data.userKey), '" style="display: none" class="recipient-user"><img src="', soy.$$escapeHtml(opt_data.thumbnailLink.href), '" title="', soy.$$escapeHtml(opt_data.title), '"/><span class="title" title="', soy.$$escapeHtml(opt_data.title), '">', soy.$$escapeHtml(opt_data.title), '</span><span class="remove-recipient"/></li>');
  return opt_sb ? '' : output.toString();
};


Confluence.Templates.Share.Dialog.recipientEmail = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<li data-email="', soy.$$escapeHtml(opt_data.email), '" style="display: none" class="recipient-email"><img src="', soy.$$escapeHtml(opt_data.icon), '" title="', soy.$$escapeHtml(opt_data.email), '"/><span class="title" title="', soy.$$escapeHtml(opt_data.email), '">', soy.$$escapeHtml(opt_data.email), '</span><span class="remove-recipient"/></li>');
  return opt_sb ? '' : output.toString();
};


Confluence.Templates.Share.Dialog.recipientGroup = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<li data-group="', soy.$$escapeHtml(opt_data.title), '" style="display: none" class="recipient-group"><span><img src="', soy.$$escapeHtml(opt_data.thumbnailLink.href), '" title="', soy.$$escapeHtml(opt_data.title), '"/><span>', soy.$$escapeHtml(opt_data.title), '</span><span class="remove-recipient"/></span></li>');
  return opt_sb ? '' : output.toString();
};

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.atlassian.confluence.plugins.share-page:mail-page-resources', location = 'js/mailpage.js' */
AJS.Confluence.SharePage={};AJS.Confluence.SharePage.autocompleteUser=function(d){d=d||document.body;var e=AJS.$,a=/^([a-zA-Z0-9_\.\-\+\!#\$%&'\*/=\?\^_`{|}~])+\@.*/;var c=function(j){if(!j||!j.result){throw new Error("Invalid JSON format")}var f=[];for(var g=0;g<j.result.length;g++){var h=j.result[g];if(h.type=="group"){h=b(h)}}f.push(j.result);return f};function b(f){if(f.name=="confluence-users"||f.name=="confluence-administrators"){return f}f.title=f.name;f.group=f.name;f.thumbnailLink={href:Confluence.getContextPath()+"/download/resources/com.atlassian.confluence.plugins.share-page:mail-page-resources/images/group.png",type:"image/png",rel:"thumbnail"};f.link=[{href:Confluence.getContextPath(),rel:"self"}];return f}e("input.autocomplete-sharepage[data-autocomplete-user-bound!=true]",d).each(function(){var h=e(this).attr("data-autocomplete-sharepage-bound","true").attr("autocomplete","off");var g=h.attr("data-max")||10,j=h.attr("data-alignment")||"left",i=h.attr("data-dropdown-target"),f=null;if(i){f=e(i)}else{f=e("<div></div>");h.after(f)}f.addClass("aui-dd-parent autocomplete");h.quicksearch(AJS.REST.getBaseUrl()+"search/user-or-group.json",function(){h.trigger("open.autocomplete-sharepage")},{makeParams:function(k){return{"max-results":g,query:k.replace("{|}","")}},dropdownPlacement:function(k){f.append(k)},makeRestMatrixFromData:c,addDropdownData:function(l){var k=e.trim(h.val());if(a.test(k)){l.push([{name:k,email:k,href:"#",icon:Confluence.getContextPath()+"/download/resources/com.atlassian.confluence.plugins.share-page:mail-page-resources/images/envelope.png"}])}if(!l.length){var m=h.attr("data-none-message");if(m){l.push([{name:m,className:"no-results",href:"#"}])}}return l},ajsDropDownOptions:{alignment:j,displayHandler:function(k){if(k.restObj&&k.restObj.username){return k.name+" ("+k.restObj.username+")"}return k.name},selectionHandler:function(m,l){if(l.find(".search-for").length){h.trigger("selected.autocomplete-sharepage",{searchFor:h.val()});return}if(l.find(".no-results").length){this.hide();m.preventDefault();return}var k=e("span:eq(0)",l).data("properties");if(!k.email){k=k.restObj}h.trigger("selected.autocomplete-sharepage",{content:k});this.hide();m.preventDefault()}}})})};(function(a){jQuery.fn.extend({elastic:function(){var b=["paddingTop","paddingRight","paddingBottom","paddingLeft","fontSize","lineHeight","fontFamily","width","fontWeight","border-top-width","border-right-width","border-bottom-width","border-left-width","borderTopStyle","borderTopColor","borderRightStyle","borderRightColor","borderBottomStyle","borderBottomColor","borderLeftStyle","borderLeftColor"];return this.each(function(){if(this.type!=="textarea"){return false}var g=jQuery(this),c=jQuery("<div />").css({position:"absolute",display:"none","word-wrap":"break-word","white-space":"pre-wrap"}),j=parseInt(g.css("line-height"),10)||parseInt(g.css("font-size"),"10"),l=parseInt(g.css("height"),10)||j*3,k=parseInt(g.css("max-height"),10)||Number.MAX_VALUE,d=0;if(k<0){k=Number.MAX_VALUE}c.appendTo(g.parent());var f=b.length;while(f--){c.css(b[f].toString(),g.css(b[f].toString()))}function h(){var i=Math.floor(parseInt(g.width(),10));if(c.width()!==i){c.css({width:i+"px"});e(true)}}function m(i,o){var n=Math.floor(parseInt(i,10));if(g.height()!==n){g.css({height:n+"px",overflow:o})}}function e(p){var o=g.val().replace(/&/g,"&amp;").replace(/ {2}/g,"&nbsp;").replace(/<|>/g,"&gt;").replace(/\n/g,"<br />");var i=c.html().replace(/<br>/ig,"<br />");if(p||o+"&nbsp;"!==i){c.html(o+"&nbsp;");if(Math.abs(c.height()+j-g.height())>3){var n=c.height()+j;if(n>=k){m(k,"auto")}else{if(n<=l){m(l,"hidden")}else{m(n,"hidden")}}}}}g.css({overflow:"hidden"});g.bind("keyup change cut paste",function(){e()});a(window).bind("resize",h);g.bind("resize",h);g.bind("update",e);g.bind("input paste",function(i){setTimeout(e,250)});e()})}})})(AJS.$);(function(f){var e,c={hideCallback:a,width:250,hideDelay:3600000,calculatePositions:function(h,o,w,s){var p;var y;var u;var l=-7;var m;var q;var x=o.target.offset();var g=o.target.outerWidth();var j=x.left+g/2;var t=(window.pageYOffset||document.documentElement.scrollTop)+f(window).height();var k=10;u=x.top+o.target.outerHeight()+s.offsetY;p=x.left+s.offsetX;var n=x.top>h.height();var i=(u+h.height())<t;q=(!i&&n)||(s.onTop&&n);var r=f(window).width()-(p+s.width+k);if(q){u=x.top-h.height()-8;var v=s.displayShadow?(AJS.$.browser.msie?10:9):0;l=h.height()-v}m=j-p+s.arrowOffsetX;if(s.isRelativeToMouse){if(r<0){y=k;p="auto";m=w.x-(f(window).width()-s.width)}else{p=w.x-20;y="auto";m=w.x-p}}else{if(r<0){y=k;p="auto";m=j-(f(window).width()-h.outerWidth())}else{if(s.width<=g/2){m=s.width/2;p=j-s.width/2}}}return{displayAbove:q,popupCss:{left:p,right:y,top:u},arrowCss:{position:"absolute",left:m,right:"auto",top:l}}}};var a=function(){f(".dashboard-actions .explanation").hide()};var d=function(j,h,i){if(j.find("input").length){i();return}j.append(Confluence.Templates.Share.Dialog.shareContentPopup());AJS.Confluence.SharePage.autocompleteUser();var k=function(m){AJS.Confluence.SharePage.current.hide();if(m){setTimeout(function(){j.empty()},300)}return false};f(document).keyup(function(m){if(m.keyCode==27){k(true);f(document).unbind("keyup",arguments.callee);return false}return true});j.find(".close-dialog").click(function(){k(true)});j.find("#note").elastic();j.find("form").submit(function(){var r=[];j.find(".recipients li").each(function(s,t){r.push(f(t).attr("data-userKey"))});if(r.length<=0){return false}f("button,input,textarea",this).attr("disabled","disabled");j.find(".progress-messages-icon").removeClass("error");j.find(".progress-messages").text("\u041E\u0442\u043F\u0440\u0430\u0432\u043A\u0430");j.find(".progress-messages").attr("title","\u041E\u0442\u043F\u0440\u0430\u0432\u043A\u0430");var o=Raphael.spinner(j.find(".progress-messages-icon")[0],7,"#666");j.find(".progress-messages-icon").css("position","absolute").css("left","0").css("margin-top","3px");j.find(".progress-messages").css("padding-left",j.find(".progress-messages-icon").innerWidth()+5);var r=[];j.find(".recipients li[data-userKey]").each(function(s,t){r.push(f(t).attr("data-userKey"))});var q=[];j.find(".recipients li[data-email]").each(function(s,t){q.push(f(t).attr("data-email"))});var m=[];j.find(".recipients li[data-group]").each(function(s,t){m.push(f(t).attr("data-group"))});var n=j.find("#note");var p={users:r,emails:q,groups:m,note:n.hasClass("placeholded")?"":n.val(),entityId:AJS.params.pageId};f.ajax({type:"POST",contentType:"application/json; charset=utf-8",url:Confluence.getContextPath()+"/rest/share-page/latest/share",data:JSON.stringify(p),dataType:"text",success:function(){setTimeout(function(){o();j.find(".progress-messages-icon").addClass("done");j.find(".progress-messages").text("\u041E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u043E");j.find(".progress-messages").attr("title","\u041E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u043E");setTimeout(function(){j.find(".progress-messages").text("");j.find(".progress-messages-icon").removeClass("done");j.find("#note").val("");f("button,input,textarea",j).removeAttr("disabled");k(false)},1000)},500)},error:function(t,s){o();j.find(".progress-messages-icon").addClass("error");j.find(".progress-messages").text("Error sending");j.find(".progress-messages").attr("title","Error sending"+": "+s);f("button,input,textarea",j).removeAttr("disabled")}});return false});var l=j.find("#users");var g=j.find("input.submit");l.bind("selected.autocomplete-sharepage",function(n,m){var o=function(r,q,s){var u=j.find(".recipients"),t,p;t="li[data-"+r+'="'+s.content[r]+'"]';if(u.find(t).length>0){u.find(t).hide()}else{u.append(q(s.content))}p=u.find(t);p.find(".remove-recipient").click(function(){p.remove();if(u.find("li").length==0){g.attr("disabled","true")}AJS.Confluence.SharePage.current.refresh();l.focus();return false});p.fadeIn(200)};if(m.content.email){o("email",Confluence.Templates.Share.Dialog.recipientEmail,m)}else{if(m.content.type=="group"){o("group",Confluence.Templates.Share.Dialog.recipientGroup,m)}else{o("userKey",Confluence.Templates.Share.Dialog.recipientUser,m)}}AJS.Confluence.SharePage.current.refresh();g.removeAttr("disabled");l.val("");return false});l.bind("open.autocomplete-sharepage",function(n,m){if(f("a:not(.no-results)",AJS.dropDown.current.links).length>0){AJS.dropDown.current.moveDown()}});l.keypress(function(m){return m.keyCode!=13});f(document).bind("showLayer",function(o,n,m){if(n=="inlineDialog"&&m.popup==AJS.Confluence.SharePage.current){m.popup.find("#users").focus()}});f(h).parents().filter(function(){return this.scrollTop>0}).scrollTop(0);i()};var b=function(g){var h=f("#splitter-content");if(h.length!==0){g.container=h;g.offsetY=AJS.InlineDialog.opts.offsetY-h.offset().top}return g};AJS.Confluence.SharePage.initDialog=function(g,i,h){if(g.length){var j=f.extend(false,b(c),h);AJS.Confluence.SharePage.current=AJS.InlineDialog(g,i,d,j)}};AJS.toInit(function(g){AJS.Confluence.SharePage.initDialog(g("#shareContentLink"),"shareContentPopup")})})(AJS.$);
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.atlassian.confluence.plugins.editor.confluence-source-editor:atlassian-source-editor-view-storage-javascript', location = 'jscripts/source-editor/view-source.js' */
AJS.toInit(function(A){if(A("#action-view-storage-link").length){A("#action-source-editor-view-storage-link").closest("li").hide()
}});
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.atlassian.confluence.plugins.watch-button:watch-resources', location = 'js/models.js' */
(function(b,a){a.Watch=Backbone.Model.extend({saveSettings:function(d,e){this.trigger("request");var c=this;return AJS.safe.ajax({url:d,type:"POST",dataType:"json",data:e}).done(function(){c.trigger("sync",c)}).fail(function(){c.trigger("error")})},saveWatchPage:function(d){var c=AJS.contextPath()+"/users/"+(d?"add":"remove")+"pagenotificationajax.action";this.set("watchingPage",d);return this.saveSettings(c,{pageId:this.get("pageId")})},saveWatchBlogs:function(d){var c=AJS.contextPath()+"/users/"+(d?"add":"remove")+"spacenotificationajax.action";this.set("watchingBlogs",d);return this.saveSettings(c,{spaceKey:this.get("spaceKey"),contentType:"blogpost"})},saveWatchSpace:function(d){var c=AJS.contextPath()+"/users/"+(d?"add":"remove")+"spacenotificationajax.action";this.set("watchingSpace",d);return this.saveSettings(c,{spaceKey:this.get("spaceKey")})}})}(AJS.$,CW=window.CW||{}));
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.atlassian.confluence.plugins.watch-button:watch-resources', location = 'js/views.js' */
(function(b,a){a.WatchView=Backbone.View.extend({events:{"change #cw-watch-page":"changeWatchPage","change #cw-watch-blogs":"changeWatchBlogs","change #cw-watch-space":"changeWatchSpace"},initialize:function(){_.bindAll(this,"render","initTooltips","changeWatchPage","changeWatchBlogs","changeWatchSpace","togglePageEnabledState","toggleBlogsEnabledState","startLoading","stopLoading","setTitle");this.model.on("sync change:watchingSpace",this.togglePageEnabledState,this);this.model.on("change:watchingSpace",this.toggleBlogsEnabledState,this);this.model.on("request",this.startLoading,this);this.model.on("sync",this.setTitle,this);this.model.on("sync",this.stopLoading,this)},render:function(){this.$el.html(Confluence.Watch.Templates.dialogBody(this.model.toJSON()));this.initTooltips();this.setTitle(this.model);return this},initTooltips:function(){this.$(".cw-tooltip").tooltip({gravity:"e",offset:5,delayIn:0});this.togglePageEnabledState(this.model);this.toggleBlogsEnabledState(this.model)},changeWatchPage:function(d){var c=b(d.target).is(":checked");this.model.saveWatchPage(c)},changeWatchBlogs:function(d){var c=b(d.target).is(":checked");this.model.saveWatchBlogs(c)},changeWatchSpace:function(d){var c=b(d.target).is(":checked");this.model.saveWatchSpace(c)},togglePageEnabledState:function(c){var d=c.get("watchingPage");var f=c.get("watchingSpace");this.$("#cw-watch-page").prop("disabled",f);this.$("#cw-watch-page").prop("checked",d||f);var e=f?"You will receive updates for this page because you are watching this space.":"";this.$(".cw-tooltip-watch-page").attr("original-title",e)},toggleBlogsEnabledState:function(c){var f=c.get("watchingBlogs");var e=c.get("watchingSpace");this.$("#cw-watch-blogs").prop("disabled",e);this.$("#cw-watch-blogs").prop("checked",f||e);var d=e?"You are subscribed to all blog posts because you are watching this space.":"";this.$(".cw-tooltip-watch-blogs").attr("original-title",d)},startLoading:function(){this.$(".cw-status").addClass("loading")},stopLoading:function(){this.$(".cw-status").removeClass("loading")},setTitle:function(){var f=this.model.get("watchingPage");var h=this.model.get("watchingBlogs");var g=this.model.get("watchingSpace");var e=this.model.get("isBlogPost");function d(){if(g){return"space"}if(f&&e&&h){return"blog.and.blogs"}if(f&&e){return"blog"}if(f){return"page"}if(e&&h){return"blogs"}if(e){return"nothing.blog"}return"nothing.page"}var c=d();this.$(".cw-title").text(AJS.I18n.getText("confluence.watch.title.watching."+c));this.$(".cw-title-description").text(AJS.I18n.getText("confluence.watch.title.watching."+c+".description"))}})}(AJS.$,CW=window.CW||{}));
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.atlassian.confluence.plugins.watch-button:watch-resources', location = 'js/watch.js' */
(function(e,a){AJS.$(function(){AJS.I18n.get("com.atlassian.confluence.plugins.watch-button");var f=e("#watch-content-button");if(!f.length){return}var l=b(f);var h=AJS.Meta.get("page-id");var i=AJS.Meta.get("space-key");var g=AJS.Meta.get("space-name");_.extend(l,{pageId:h,spaceKey:i,spaceName:g});c(f,l);var k=new a.Watch(l);var j=new a.WatchView({model:k});AJS.InlineDialog(f,"confluence-watch",function(n,m,o){j.setElement(n);j.render();o()},{width:325,offsetX:-180,cacheContent:false,hideDelay:null,hideCallback:function(){e(".tipsy").hide()}});k.on("change:watchingPage change:watchingBlogs change:watchingSpace",function(m){c(f,m.toJSON())});a.registerAnalytics(k);d(k);window.CW_watchPage=function(){var o=k.get("watchingSpace");var n=k.get("watchingPage");if(o){e("body, #splitter-content").animate({scrollTop:0},300,function(){f.click();setTimeout(function(){e(".cw-tooltip-watch-page").tipsy("show")},50)})}else{var p=!n;k.saveWatchPage(p);var m=p?"You started watching this page.":"You stopped watching this page.";a.Notification.notify("success",m)}}});function c(g,j){var h=j.watchingPage;var f=j.isBlogPost&&j.watchingBlogs;var i=j.watchingSpace;if(h||f||i){g.removeClass("not-watching").addClass("watching")}else{g.removeClass("watching").addClass("not-watching")}}function d(f){f.on("change:watchingPage",function(g,i){var h=i?"watchpage.pageoperation":"unwatchpage.pageoperation";AJS.trigger(h)})}function b(h){var i=h.prop("search");var g=/[?&;]*(.*?)=([^&;]*)/g;var f;var j={};if(i){while(f=g.exec(i)){j[f[1]]=decodeURIComponent(f[2]).replace(/\+/g," ")}}_.each(j,function(l,k){if(l=="true"){j[k]=true}else{if(l=="false"){j[k]=false}}});return j}}(AJS.$,CW=window.CW||{}));
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.atlassian.confluence.plugins.watch-button:watch-resources', location = 'js/watch-analytics.js' */
var CW=CW||{};CW.registerAnalytics=function(a){a.on("change:watchingPage",function(b,d){var c=d?"watch-page":"unwatch-page";AJS.trigger("analytics",{name:c})});a.on("change:watchingBlogs",function(b,d){var c=d?"watch-blogs":"unwatch-blogs";AJS.trigger("analytics",{name:c})});a.on("change:watchingSpace",function(b,d){var c=d?"watch-space":"unwatch-space";AJS.trigger("analytics",{name:c})})};
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.atlassian.confluence.plugins.watch-button:watch-resources', location = 'js/notification.js' */
(function(b,a){b(function(){var c="cw-notification-container";var d=b("<div></div>",{id:c});b("body").append(d);a.Notification={notify:function(e,f,h){AJS.messages[e]("#"+c,{body:f,closeable:true,insert:"prepend"});var g=b(".aui-message",d).first();if(!h){h=5000}else{h*=1000}setTimeout(function(){g.fadeOut("fast",function(){g.closeMessage();g=null})},h)}}})}(AJS.$,CW=window.CW||{}));
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.atlassian.confluence.plugins.watch-button:watch-resources', location = 'templates/watch.soy' */
// This file was automatically generated from watch.soy.
// Please don't edit this file by hand.

if (typeof Confluence == 'undefined') { var Confluence = {}; }
if (typeof Confluence.Watch == 'undefined') { Confluence.Watch = {}; }
if (typeof Confluence.Watch.Templates == 'undefined') { Confluence.Watch.Templates = {}; }


Confluence.Watch.Templates.dialogBody = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div class="cw-status"><h2 class="cw-title"></h2><p class="cw-title-description"></p></div><form class="aui cw-dialog"><div class="cw-tooltip cw-tooltip-watch-page"><div class="checkbox"><input class="checkbox" type="checkbox" id="cw-watch-page" ', (opt_data.watchingPage) ? 'checked' : '', '><label for="cw-watch-page">', (opt_data.isBlogPost) ? soy.$$escapeHtml("Watch blog post") : soy.$$escapeHtml("\u0421\u043b\u0435\u0434\u0438\u0442\u044c \u0437\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u0439"), '</label></div></div>', (opt_data.isBlogPost) ? '<div class="cw-tooltip cw-tooltip-watch-blogs"><div class="checkbox"><input class="checkbox" type="checkbox" id="cw-watch-blogs" ' + ((opt_data.watchingBlogs) ? 'checked' : '') + '><label for="cw-watch-blogs">' + soy.$$escapeHtml("\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0437\u0430 \u043d\u043e\u0432\u044b\u043c\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u0431\u043b\u043e\u0433\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435") + '</label></div></div>' : '', '<div class="checkbox"><input class="checkbox" type="checkbox" id="cw-watch-space" ', (opt_data.watchingSpace) ? 'checked' : '', '><label for="cw-watch-space">', soy.$$escapeHtml("\u0421\u043b\u0435\u0434\u0438\u0442\u044c \u0437\u0430 \u0432\u0441\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435"), '</label></div></form>', (opt_data.isAdmin) ? '<div class="cw-manage-watchers-wrapper"><button class="aui-button aui-button-link cw-manage-watchers">' + soy.$$escapeHtml("\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u0435\u043b\u0435\u0439") + '</button></div>' : '');
  return opt_sb ? '' : output.toString();
};

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'js/talk-permissions.js' */
(function($) {
    window.TalkParams = {
        restrictions: [],
        oldRestrictions: [],
        params: {},

        initRestrictions: function() {
            this.restrictions = [];

            $.each(this.params.permissions.users, function(i, user) {
                TalkParams.restrictions["user" + user.username] = user;
            });

            $.each(this.params.permissions.groups, function(i, group) {
                TalkParams.restrictions["group" + group.name] = group;
            });

            this.updateOldRestrictions();
        },

        updateOldRestrictions: function() {
            this.oldRestrictions = $.extend(true, {}, this.restrictions);
        },

        addRestriction: function(data) {
            if (data.type == "user") {
                this.restrictions["user" + data.username] = data;
                this.params.permissions.users.push(data);
            } if (data.type == "group") {
                this.restrictions["group" + data.name] = data;
                this.params.permissions.groups.push(data);
            }
        },

        removeRestriction: function(data) {
            if (data.type == "user") {
                this.restrictions["user" + data.username] = undefined;
                this.params.permissions.users = $.grep(this.params.permissions.users, function(user) {
                    return user.username != data.username;
                });
            } if (data.type == "group") {
                this.restrictions["group" + data.name] = undefined;
                this.params.permissions.groups = $.grep(this.params.permissions.groups, function(group) {
                    return group.name != data.name;
                })
            }
        },

        getRestriction: function(data) {
            if (data.type == "user") {
                return this.restrictions["user" + data.username];
            } if (data.type == "group") {
                return this.restrictions["group" + data.name];
            }
        },

        getNewViewableBy: function(type) {
            return this.getViewableBy(type, this.restrictions);
        },

        getOldViewableBy: function(type) {
            return this.getViewableBy(type, this.oldRestrictions);
        },

        getViewableBy: function(type, restrictions) {
            var data = [];
            for (var k in restrictions) {
                if (restrictions[k] != undefined && restrictions[k].type == type) {
                    if (type == "group") {
                        data.push(restrictions[k].name);
                    } else {
                        data.push(restrictions[k].username);
                    }
                }
            }
            return data;
        }
    };

    window.TalkRest = {
        send: function(options) {
            $.ajax({
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                type: options.type,
                cache: false,
                async: false,
                url: Confluence.getContextPath() + '/rest/talk/1.0/' + options.resource,
                data: options.data,
                dataType: 'json',
                success: options.success,
                error: options.error
            });
        }
    };

    window.TalkPermissionManager = {
        restoreRestrictions: function() {
            var restrictions = $('#talk-restrictions');

            $.each(TalkParams.params.permissions.users, function(i, user) {
                restrictions.append($(TalkPermissions.restrictUser({user: user})).data('restriction', user));
            });

            $.each(TalkParams.params.permissions.groups, function(i, group) {
                restrictions.append($(TalkPermissions.restrictGroup({group: group, isAdmin: TalkParams.params.isAdmin})).data('restriction', group));
            });

            if (TalkParams.params.permissions.users.length + TalkParams.params.permissions.groups.length == 0) {
                $('#talk-no-permissions').show();
            }

            Confluence.Binder.userHover();
        },

        removeRestriction: function($this) {
            var restriction = $('div[data-restriction-name="' + $this.data('restrictionName') + '"]');
            TalkParams.removeRestriction(restriction.data('restriction'));
            restriction.remove();

            if($('.talk-permission').length == 0) {
                $('#talk-no-permissions').show();
            }
        },

        addRestrictions: function(input, data) {
            input.val('');
            if (TalkParams.getRestriction(data.content) == undefined) {
                TalkParams.addRestriction(data.content);
                var restriction;
                if (data.content.type == "user") {
                    restriction = $(TalkPermissions.restrictUser({user: data.content}));
                } else {
                    restriction = $(TalkPermissions.restrictGroup({group: data.content, isAdmin: TalkParams.params.isAdmin}));
                }
                restriction.data('restriction', data.content);
                $('#talk-no-permissions').hide();
                $('#talk-restrictions').append(restriction);
                TalkPermissionManager.truncateLastRestriction();
                Confluence.Binder.userHover();
            }
        },

        truncateLastRestriction: function() {
            var textBox = $(".restriction-title").last();
            TalkStringHelper.truncateText(textBox.parents('.talk-permission'), textBox, 14)
        },

        truncateAllRestrictions: function() {
            $(".restriction-title").each(function() {
                TalkStringHelper.truncateText($(this).parents('.talk-permission'), $(this), 14);
            });
        }
    };
})(AJS.$);
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'js/talk-string-helper.js' */
(function($) {
    window.TalkStringHelper = {
        truncateText: function(container, textBox, paddings) {
            var childrenWidth = 0;
            container.children().each(function() {
                if ($(this).css('position') != 'absolute') {
                    childrenWidth += $(this).outerWidth(true);
                }
            });
            childrenWidth -= textBox.outerWidth(true);

            if (textBox.outerWidth(true) >= container.width() - childrenWidth - paddings) {
                var childNodes = textBox.get(0).childNodes;

                for (var j = childNodes.length - 1; j >= 0; j--) {
                    var childNode = childNodes[j];
                    var truncatedChars = 1;
                    var valueAttr = (childNode.nodeType == 3) ? "nodeValue" : "innerHTML";
                    var nodeText = childNode[valueAttr];

                    do {
                        if (truncatedChars <= nodeText.length) {
                            childNode[valueAttr] = nodeText.substr(0, nodeText.length - truncatedChars++);
                        } else {
                            break;
                        }
                    } while (textBox.outerWidth(true) + 10 >= container.width() - childrenWidth - paddings);

                    if (truncatedChars <= nodeText.length) {
                        textBox.append("&#8230;");
                        break;
                    }
                }
            }
        },

        isUrl: function(str) {
            var pattern = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
            return pattern.test(str);
        },

        textDiff: function(first, second, selected) {
            if (selected) {
                first = first.substring(0, selected.start) + first.substring(selected.end, first.length);
            }

            var start = 0;
            while (start < first.length && first[start] == second[start]) {
                ++start;
            }

            var end = 0;
            while (first.length - end > start && first[first.length - end - 1] == second[second.length - end - 1]) {
                ++end;
            }

            end = second.length - end;
            return {
                string: second.substr(start, end - start),
                start: start
            }
        }
    };

    $.fn.insertAtCaret = function(text) {
        var txtarea = this.get(0);
        var scrollPos = txtarea.scrollTop;
        var strPos = 0;
        var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?
            "ff" : (document.selection ? "ie" : false ) );
        if (br == "ie") {
            txtarea.focus();
            var range = document.selection.createRange();
            range.moveStart ('character', -txtarea.value.length);
            strPos = range.text.length;
        }
        else if (br == "ff") strPos = txtarea.selectionStart;

        var front = (txtarea.value).substring(0,strPos);
        var back = (txtarea.value).substring(strPos,txtarea.value.length);
        txtarea.value=front+text+back;
        strPos = strPos + text.length;
        if (br == "ie") {
            txtarea.focus();
            range = document.selection.createRange();
            range.moveStart ('character', -txtarea.value.length);
            range.moveStart ('character', strPos);
            range.moveEnd ('character', 0);
            range.select();
        }
        else if (br == "ff") {
            txtarea.selectionStart = strPos;
            txtarea.selectionEnd = strPos;
            txtarea.focus();
        }
        txtarea.scrollTop = scrollPos;
    };

    $.fn.getCursorPosition = function() {
        var el = $(this).get(0);
        var pos = 0;
        if('selectionStart' in el) {
            pos = el.selectionStart;
        } else if('selection' in document) {
            el.focus();
            var Sel = document.selection.createRange();
            var SelLength = document.selection.createRange().text.length;
            Sel.moveStart('character', -el.value.length);
            pos = Sel.text.length - SelLength;
        }
        return pos;
    };

    $.fn.setCursorPosition = function(pos) {
        if ($(this).get(0).setSelectionRange) {
            $(this).get(0).setSelectionRange(pos, pos);
        } else if ($(this).get(0).createTextRange) {
            var range = $(this).get(0).createTextRange();
            range.collapse(true);
            range.moveEnd('character', pos);
            range.moveStart('character', pos);
            range.select();
        }
    };
})(AJS.$);

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'soy/talk.permissions.soy' */
// This file was automatically generated from talk.permissions.soy.
// Please don't edit this file by hand.

if (typeof TalkPermissions == 'undefined') { var TalkPermissions = {}; }


TalkPermissions.restrictionContainer = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div id="talk-restrictions"><div id="talk-no-permissions">', soy.$$escapeHtml("\u041f\u0440\u0430\u0432\u0430 \u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b. \u041d\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440."), '</div></div>');
  return opt_sb ? '' : output.toString();
};


TalkPermissions.restrictUser = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div class="talk-permission" data-restriction-name="user', soy.$$escapeHtml(opt_data.user.username), '"><img class="restriction-icon" src="', soy.$$escapeHtml(opt_data.user.thumbnailLink.href), '"><a href="', soy.$$escapeHtml(opt_data.user.link[0].href), '" class="confluence-userlink" data-username="', soy.$$escapeHtml(opt_data.user.username), '" target="_blank" tabindex="1002"><span class="restriction-title">', soy.$$escapeHtml(opt_data.user.title), '</span></a><span class="remove-restriction" data-restriction-name="user', soy.$$escapeHtml(opt_data.user.username), '"><span class="remove-restriction-icon" title="', soy.$$escapeHtml("\u0423\u0431\u0440\u0430\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435"), '"></span><span class="remove-restriction-text">', soy.$$escapeHtml("\u0423\u0431\u0440\u0430\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435"), '</span></span></div>');
  return opt_sb ? '' : output.toString();
};


TalkPermissions.restrictGroup = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div class="talk-permission" data-restriction-name="group', soy.$$escapeHtml(opt_data.group.name), '"><img class="restriction-icon" src="', soy.$$escapeHtml(opt_data.group.thumbnailLink.href), '">', (opt_data.isAdmin) ? '<a href="' + soy.$$escapeHtml("") + '/admin/users/domembersofgroupsearch.action?membersOfGroupTerm=' + soy.$$escapeHtml(opt_data.group.name) + '" target="_blank" tabindex="1002" class="restriction-title">' + soy.$$escapeHtml(opt_data.group.title) + '</a>' : '<span class="restriction-title">' + soy.$$escapeHtml(opt_data.group.title) + '</span>', '<span class="remove-restriction" data-restriction-name="group', soy.$$escapeHtml(opt_data.group.name), '"><span class="remove-restriction-icon" title="', soy.$$escapeHtml("\u0423\u0431\u0440\u0430\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435"), '"></span><span class="remove-restriction-text">', soy.$$escapeHtml("\u0423\u0431\u0440\u0430\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435"), '</span></span></div>');
  return opt_sb ? '' : output.toString();
};

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'js/jquery.autoresize.js' */
/*
 * jQuery.fn.autoResize 1.14
 * --
 * https://github.com/jamespadolsey/jQuery.fn.autoResize
 * --
 * This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */ 

(function($){

	var uid = 'ar' + +new Date,

		defaults = autoResize.defaults = {
			onResize: function(){},
			onBeforeResize: function(){return 123},
			onAfterResize: function(){return 555},
			animate: {
				duration: 200,
				complete: function(){}
			},
			extraSpace: 50,
			minHeight: 'original',
			maxHeight: 500,
			minWidth: 'original',
			maxWidth: 500
		};

	autoResize.cloneCSSProperties = [
		'lineHeight', 'textDecoration', 'letterSpacing',
		'fontSize', 'fontFamily', 'fontStyle', 'fontWeight',
		'textTransform', 'textAlign', 'direction', 'wordSpacing', 'fontSizeAdjust',
		'paddingTop', 'paddingLeft', 'paddingBottom', 'paddingRight', 'width'
	];

	autoResize.cloneCSSValues = {
		position: 'absolute',
		top: -9999,
		left: -9999,
		opacity: 0,
		overflow: 'hidden'
	};

	autoResize.resizableFilterSelector = [
		'textarea:not(textarea.' + uid + ')',
		'input:not(input[type])',
		'input[type=text]',
		'input[type=password]',
		'input[type=email]',
		'input[type=url]'
	].join(',');

	autoResize.AutoResizer = AutoResizer;

	$.fn.autoResize = autoResize;

	function autoResize(config) {
		this.filter(autoResize.resizableFilterSelector).each(function(){
			new AutoResizer( $(this), config );
		});
		return this;
	}

	function AutoResizer(el, config) {

		if (el.data('AutoResizer')) {
			el.data('AutoResizer').destroy();
		}
		
		config = this.config = $.extend({}, autoResize.defaults, config);
		this.el = el;

		this.nodeName = el[0].nodeName.toLowerCase();

		this.originalHeight = el.height();
		this.previousScrollTop = null;

		this.value = el.val();

		if (config.maxWidth === 'original') config.maxWidth = el.width();
		if (config.minWidth === 'original') config.minWidth = el.width();
		if (config.maxHeight === 'original') config.maxHeight = el.height();
		if (config.minHeight === 'original') config.minHeight = el.height();

		if (this.nodeName === 'textarea') {
			el.css({
				resize: 'none',
				overflowY: 'hidden'
			});
		}

		el.data('AutoResizer', this);

		// Make sure onAfterResize is called upon animation completion
		config.animate.complete = (function(f){
			return function() {
				config.onAfterResize.call(el);
				return f.apply(this, arguments);
			};
		}(config.animate.complete));

		this.bind();

	}

	AutoResizer.prototype = {

		bind: function() {

			var check = $.proxy(function(){
				this.check();
				return true;
			}, this);

			this.unbind();

			this.el
				.bind('keyup.autoResize', check)
				//.bind('keydown.autoResize', check)
				.bind('change.autoResize', check)
				.bind('paste.autoResize', function() {
					setTimeout(function() { check(); }, 0);
				});
			
			if (!this.el.is(':hidden')) {
				this.check(null, true);
			}

		},

		unbind: function() {
			this.el.unbind('.autoResize');
		},

		createClone: function() {

			var el = this.el,
				clone = this.nodeName === 'textarea' ? el.clone() : $('<span/>');

			this.clone = clone;

			$.each(autoResize.cloneCSSProperties, function(i, p){
				clone[0].style[p] = el.css(p);
			});

			clone
				.removeAttr('name')
				.removeAttr('id')
				.addClass(uid)
				.attr('tabIndex', -1)
				.css(autoResize.cloneCSSValues);

			if (this.nodeName === 'textarea') {
				clone.height('auto');
			} else {
				clone.width('auto').css({
					whiteSpace: 'nowrap'
				});
			}

		},

		check: function(e, immediate) {

			if (!this.clone) {
		this.createClone();
		this.injectClone();
			}

			var config = this.config,
				clone = this.clone,
				el = this.el,
				value = el.val();

			// Do nothing if value hasn't changed
			if (value === this.prevValue) { return true; }
			this.prevValue = value;

			if (this.nodeName === 'input') {

				clone.text(value);

				// Calculate new width + whether to change
				var cloneWidth = clone.width(),
					newWidth = (cloneWidth + config.extraSpace) >= config.minWidth ?
						cloneWidth + config.extraSpace : config.minWidth,
					currentWidth = el.width();

				newWidth = Math.min(newWidth, config.maxWidth);

				if (
					(newWidth < currentWidth && newWidth >= config.minWidth) ||
					(newWidth >= config.minWidth && newWidth <= config.maxWidth)
				) {

					config.onBeforeResize.call(el);
					config.onResize.call(el);

					el.scrollLeft(0);

					if (config.animate && !immediate) {
						el.stop(1,1).animate({
							width: newWidth
						}, config.animate);
					} else {
						el.width(newWidth);
						config.onAfterResize.call(el);
					}

				}

				return;

			}

			// TEXTAREA
			
			clone.width(el.width()).height(0).val(value).scrollTop(10000);
			
			var scrollTop = clone[0].scrollTop;
				
			// Don't do anything if scrollTop hasen't changed:
			if (this.previousScrollTop === scrollTop) {
				return;
			}

			this.previousScrollTop = scrollTop;
			
			if (scrollTop + config.extraSpace >= config.maxHeight) {
				el.css('overflowY', '');
				scrollTop = config.maxHeight;
				immediate = true;
			} else if (scrollTop <= config.minHeight) {
				scrollTop = config.minHeight;
			} else {
				el.css('overflowY', 'hidden');
				scrollTop += config.extraSpace;
			}

			config.onBeforeResize.call(el);
			config.onResize.call(el);

			// Either animate or directly apply height:
			if (config.animate && !immediate) {
				el.stop(1,1).animate({
					height: scrollTop
				}, config.animate);
			} else {
				el.height(scrollTop);
				config.onAfterResize.call(el);
			}

		},

		destroy: function() {
			this.unbind();
			this.el.removeData('AutoResizer');
			this.clone.remove();
			delete this.el;
			delete this.clone;
		},

		injectClone: function() {
			(
				autoResize.cloneContainer ||
				(autoResize.cloneContainer = $('<arclones/>').appendTo('body'))
			).append(this.clone);
		}

	};
	
})(jQuery);

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'js/jquery.ba-resize.js' */
/*!
 * jQuery resize event - v1.1 - 3/14/2010
 * http://benalman.com/projects/jquery-resize-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */

// Script: jQuery resize event
//
// *Version: 1.1, Last updated: 3/14/2010*
// 
// Project Home - http://benalman.com/projects/jquery-resize-plugin/
// GitHub       - http://github.com/cowboy/jquery-resize/
// Source       - http://github.com/cowboy/jquery-resize/raw/master/jquery.ba-resize.js
// (Minified)   - http://github.com/cowboy/jquery-resize/raw/master/jquery.ba-resize.min.js (1.0kb)
// 
// About: License
// 
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
// 
// About: Examples
// 
// This working example, complete with fully commented code, illustrates a few
// ways in which this plugin can be used.
// 
// resize event - http://benalman.com/code/projects/jquery-resize/examples/resize/
// 
// About: Support and Testing
// 
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
// 
// jQuery Versions - 1.3.2, 1.4.1, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-3.6, Safari 3-4, Chrome, Opera 9.6-10.1.
// Unit Tests      - http://benalman.com/code/projects/jquery-resize/unit/
// 
// About: Release History
// 
// 1.1 - (3/14/2010) Fixed a minor bug that was causing the event to trigger
//       immediately after bind in some circumstances. Also changed $.fn.data
//       to $.data to improve performance.
// 1.0 - (2/10/2010) Initial release

(function($,window,undefined){
  '$:nomunge'; // Used by YUI compressor.
  
  // A jQuery object containing all non-window elements to which the resize
  // event is bound.
  var elems = $([]),
    
    // Extend $.resize if it already exists, otherwise create it.
    jq_resize = $.resize = $.extend( $.resize, {} ),
    
    timeout_id,
    
    // Reused strings.
    str_setTimeout = 'setTimeout',
    str_resize = 'ba-resize',
    str_data = str_resize + '-special-event',
    str_delay = 'delay',
    str_throttle = 'throttleWindow';
  
  // Property: jQuery.resize.delay
  // 
  // The numeric interval (in milliseconds) at which the resize event polling
  // loop executes. Defaults to 250.
  
  jq_resize[ str_delay ] = 250;
  
  // Property: jQuery.resize.throttleWindow
  // 
  // Throttle the native window object resize event to fire no more than once
  // every <jQuery.resize.delay> milliseconds. Defaults to true.
  // 
  // Because the window object has its own resize event, it doesn't need to be
  // provided by this plugin, and its execution can be left entirely up to the
  // browser. However, since certain browsers fire the resize event continuously
  // while others do not, enabling this will throttle the window resize event,
  // making event behavior consistent across all elements in all browsers.
  // 
  // While setting this property to false will disable window object resize
  // event throttling, please note that this property must be changed before any
  // window object resize event callbacks are bound.
  
  jq_resize[ str_throttle ] = true;
  
  // Event: resize event
  // 
  // Fired when an element's width or height changes. Because browsers only
  // provide this event for the window element, for other elements a polling
  // loop is initialized, running every <jQuery.resize.delay> milliseconds
  // to see if elements' dimensions have changed. You may bind with either
  // .resize( fn ) or .bind( "resize", fn ), and unbind with .unbind( "resize" ).
  // 
  // Usage:
  // 
  // > jQuery('selector').bind( 'resize', function(e) {
  // >   // element's width or height has changed!
  // >   ...
  // > });
  // 
  // Additional Notes:
  // 
  // * The polling loop is not created until at least one callback is actually
  //   bound to the 'resize' event, and this single polling loop is shared
  //   across all elements.
  // 
  // Double firing issue in jQuery 1.3.2:
  // 
  // While this plugin works in jQuery 1.3.2, if an element's event callbacks
  // are manually triggered via .trigger( 'resize' ) or .resize() those
  // callbacks may double-fire, due to limitations in the jQuery 1.3.2 special
  // events system. This is not an issue when using jQuery 1.4+.
  // 
  // > // While this works in jQuery 1.4+
  // > $(elem).css({ width: new_w, height: new_h }).resize();
  // > 
  // > // In jQuery 1.3.2, you need to do this:
  // > var elem = $(elem);
  // > elem.css({ width: new_w, height: new_h });
  // > elem.data( 'resize-special-event', { width: elem.width(), height: elem.height() } );
  // > elem.resize();
      
  $.event.special[ str_resize ] = {
    
    // Called only when the first 'resize' event callback is bound per element.
    setup: function() {
      // Since window has its own native 'resize' event, return false so that
      // jQuery will bind the event using DOM methods. Since only 'window'
      // objects have a .setTimeout method, this should be a sufficient test.
      // Unless, of course, we're throttling the 'resize' event for window.
      if ( !jq_resize[ str_throttle ] && this[ str_setTimeout ] ) { return false; }
      
      var elem = $(this);
      
      // Add this element to the list of internal elements to monitor.
      elems = elems.add( elem );
      
      // Initialize data store on the element.
      $.data( this, str_data, { w: elem.width(), h: elem.height() } );
      
      // If this is the first element added, start the polling loop.
      if ( elems.length === 1 ) {
        loopy();
      }
    },
    
    // Called only when the last 'resize' event callback is unbound per element.
    teardown: function() {
      // Since window has its own native 'resize' event, return false so that
      // jQuery will unbind the event using DOM methods. Since only 'window'
      // objects have a .setTimeout method, this should be a sufficient test.
      // Unless, of course, we're throttling the 'resize' event for window.
      if ( !jq_resize[ str_throttle ] && this[ str_setTimeout ] ) { return false; }
      
      var elem = $(this);
      
      // Remove this element from the list of internal elements to monitor.
      elems = elems.not( elem );
      
      // Remove any data stored on the element.
      elem.removeData( str_data );
      
      // If this is the last element removed, stop the polling loop.
      if ( !elems.length ) {
        clearTimeout( timeout_id );
      }
    },
    
    // Called every time a 'resize' event callback is bound per element (new in
    // jQuery 1.4).
    add: function( handleObj ) {
      // Since window has its own native 'resize' event, return false so that
      // jQuery doesn't modify the event object. Unless, of course, we're
      // throttling the 'resize' event for window.
      if ( !jq_resize[ str_throttle ] && this[ str_setTimeout ] ) { return false; }
      
      var old_handler;
      
      // The new_handler function is executed every time the event is triggered.
      // This is used to update the internal element data store with the width
      // and height when the event is triggered manually, to avoid double-firing
      // of the event callback. See the "Double firing issue in jQuery 1.3.2"
      // comments above for more information.
      
      function new_handler( e, w, h ) {
        var elem = $(this),
          data = $.data( this, str_data );
        
        // If called from the polling loop, w and h will be passed in as
        // arguments. If called manually, via .trigger( 'resize' ) or .resize(),
        // those values will need to be computed.
        data.w = w !== undefined ? w : elem.width();
        data.h = h !== undefined ? h : elem.height();
        
        old_handler.apply( this, arguments );
      };
      
      // This may seem a little complicated, but it normalizes the special event
      // .add method between jQuery 1.4/1.4.1 and 1.4.2+
      if ( $.isFunction( handleObj ) ) {
        // 1.4, 1.4.1
        old_handler = handleObj;
        return new_handler;
      } else {
        // 1.4.2+
        old_handler = handleObj.handler;
        handleObj.handler = new_handler;
      }
    }
    
  };
  
  function loopy() {
    
    // Start the polling loop, asynchronously.
    timeout_id = window[ str_setTimeout ](function(){
      
      // Iterate over all elements to which the 'resize' event is bound.
      elems.each(function(){
        var elem = $(this),
          width = elem.width(),
          height = elem.height(),
          data = $.data( this, str_data );

        // If element size has changed since the last time, update the element
        // data store and trigger the 'resize' event.
        if (elem.attr('id') != "splitter" && (width !== data.w || height !== data.h) ) {
          elem.trigger( str_resize, [ data.w = width, data.h = height ] );
        }
        
      });
      
      // Loop.
      loopy();
      
    }, jq_resize[ str_delay ] );
    
  };
  
})(jQuery,this);

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'js/cursores.js' */
// Copyright 2012 Nicolas Venegas <nvenegas@atlassian.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

(function (window) {

  /**
   * Cursores allows you to get and replace the token under the cursor
   * in a textarea, text input, or string.
   *
   * By default, the token is whitespace delimited with a search
   * window 128 characters either side of the cursor.
   *
   * leftRegex and rightRegex must each define exactly one capturing
   * group. maxLength must be greater than 0.
   */
  function Cursores(leftRegex, rightRegex, maxLength) {
    this.leftRegex = new RegExp((leftRegex || /(?:^|\s)(\S+)/).source + '$');
    this.rightRegex = new RegExp('^' + (rightRegex || /(\S*)/).source);
    this.maxLength = maxLength > 0 ? maxLength : 128;
  }

  Cursores.VERSION = '0.2';

  /**
   * Returns a new instance that matches a whitespace delimited token
   * starting with the provided character.
   */
  Cursores.startsWith = function (c) {
    return new Cursores(
      new RegExp(['(?:^|\\s)(', c, '[^', c, '\\s]*)'].join(''))
    );
  };

  /**
   * Returns an object representing the token under the cursor.
   *
   * There must be matching text to the left of the cursor to be
   * within a token. For example, in 'f|ox' and 'fox|' (where '|'
   * denotes the cursor), the token value is 'fox', but in '|fox',
   * there is no token under the cursor.
   *
   * If there is no token under the cursor, the "value", "prefix", and
   * "suffix" properties of the result are all the empty string.
   */
  Cursores.prototype.token = function (source, cursorIndex) {
    var text;
    if (typeof source === 'string') {
      // (string, cursorIndex)
      text = source;
    } else {
      // (el)
      text = source.value;
      cursorIndex = source.selectionStart;
    }

    var left = text.slice(0, cursorIndex),
        right = text.slice(cursorIndex),
        searchLeft = left.slice(-this.maxLength),
        searchRight = right.slice(0, this.maxLength);

    var match = searchLeft.match(this.leftRegex),
        prefix = match ? match[1] : '',
        suffix = (match = searchRight.match(this.rightRegex)) ? match[1] : '';

    return {
      value: prefix ? prefix + suffix : '',
      prefix: prefix,
      suffix: prefix ? suffix : '',
      toString: function () { return this.value; }
    };
  };

  /**
   * Replace the token under the cursor with the provided replacement
   * text and, if source is an element, move the cursor to the end of
   * the replacement text within the element.
   *
   * If the source is empty (i.e., it has no contents), even though
   * there is no token under the cursor, the replacement always
   * succeeds.
   *
   * If source is a string, returns the resulting text. If source is
   * an element, returns true if a replacement was made else false.
   */
  Cursores.prototype.replace = function (source, cursorIndex, replacement) {
    var text;
    if (typeof source === 'string') {
      // (string, cursorIndex, replacement)
      text = source;
    } else {
      // (el, replacement)
      text = source.value;
      replacement = cursorIndex;
      cursorIndex = source.selectionStart;
    }

    var token = this.token(text, cursorIndex);
    if (text && !token.value) {
      return typeof source === 'string' ? text : false;
    }

    var left = text.slice(0, cursorIndex),
        right = text.slice(cursorIndex);
    var replacedText = [
      left.slice(0, left.length - token.prefix.length),
      replacement,
      right.slice(token.suffix.length)
    ].join('');

    if (typeof source === 'string') {
      return replacedText;
    } else {
      var delta = replacement.length - token.prefix.length;
      source.value = replacedText;
      source.setSelectionRange(cursorIndex + delta, cursorIndex + delta);
      return true;
    }
  };

  window.Cursores = Cursores;

})(this);

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'js/jquery-textrange.js' */
/**
 * jquery-textrange
 * A jQuery plugin for getting, setting and replacing the selected text in input fields and textareas.
 * See the [wiki](https://github.com/dwieeb/jquery-textrange/wiki) for usage and examples.
 *
 * (c) 2013 Daniel Imhoff <dwieeb@gmail.com> - danielimhoff.com
 */
(function($) {

	var browserType,

	textrange = {

		/**
		 * $().textrange() or $().textrange('get')
		 *
		 * Retrieves an object containing the start and end location of the text range, the length of the range and the
		 * substring of the range.
		 *
		 * @param (optional) property
		 * @return An object of properties including position, start, end, length, and text or a specific property.
		 */
		get: function(property) {
			return _textrange[browserType].get.apply(this, [property]);
		},

		/**
		 * $().textrange('set')
		 *
		 * Sets the selected text of an object by specifying the start and length of the selection.
		 *
		 * The start and length parameters are identical to PHP's substr() function with the following changes:
		 *  - excluding start will select all the text in the field.
		 *  - passing 0 for length will set the cursor at start. See $().textrange('setcursor')
		 *
		 * @param (optional) start
		 * @param (optional) length
		 *
		 * @see http://php.net/manual/en/function.substr.php
		 */
		set: function(start, length) {
			var s = parseInt(start),
			    l = parseInt(length),
			    e;

			if (typeof start === 'undefined') {
				s = 0;
			}
			else if (start < 0) {
				s = this.val().length + s;
			}

			if (typeof length === 'undefined') {
				e = this.val().length;
			}
			else if (length >= 0) {
				e = s + l;
			}
			else {
				e = this.val().length + l;
			}

			_textrange[browserType].set.apply(this, [s, e]);

			return this;
		},

		/**
		 * $().textrange('setcursor')
		 *
		 * Sets the cursor at a position of the text field.
		 *
		 * @param position
		 */
		setcursor: function(position) {
			return this.textrange('set', position, 0);
		},

		/**
		 * $().textrange('replace')
		 * Replaces the selected text in the input field or textarea with text.
		 *
		 * @param text The text to replace the selection with.
		 */
		replace: function(text) {
			_textrange[browserType].replace.apply(this, [text]);

			return this;
		},

		/**
		 * Alias for $().textrange('replace')
		 */
		insert: function(text) {
			return this.textrange('replace', text);
		}
	},

	_textrange = {
		xul: {
			get: function(property) {
				var props = {
					position: this[0].selectionStart,
					start: this[0].selectionStart,
					end: this[0].selectionEnd,
					length: this[0].selectionEnd - this[0].selectionStart,
					text: this.val().substring(this[0].selectionStart, this[0].selectionEnd)
				};

				return typeof property === 'undefined' ? props : props[property];
			},

			set: function(start, end) {
				this[0].selectionStart = start;
				this[0].selectionEnd = end;
			},

			replace: function(text) {
				var start = this[0].selectionStart;
				this.val(this.val().substring(0, this[0].selectionStart) + text + this.val().substring(this[0].selectionEnd, this.val().length));
				this[0].selectionStart = start;
				this[0].selectionEnd = start + text.length;
			}
		},

		msie: {
			get: function(property) {
				var range = document.selection.createRange();

				if (typeof range === 'undefined') {
					return {
						position: 0,
						start: 0,
						end: this[0].val().length,
						length: this[0].val().length,
						text: this.val()
					};
				}

				var rangetext = this[0].createTextRange();
				var rangetextcopy = rangetext.duplicate();

				rangetext.moveToBookmark(range.getBookmark());
				rangetextcopy.setEndPoint('EndToStart', rangetext);

				return {
					position: rangetextcopy.text.length,
					start: rangetextcopy.text.length,
					end: rangetextcopy.text.length + range.text.length,
					length: range.text.length,
					text: range.text
				};
			},

			set: function(start, end) {
				var range = this[0].createTextRange();

				if (typeof range === 'undefined') {
					return this;
				}

				if (typeof start !== 'undefined') {
					range.moveStart('character', start);
					range.collapse();
				}

				if (typeof end !== 'undefined') {
					range.moveEnd('character', end - start);
				}

				range.select();
			},

			replace: function(text) {
				document.selection.createRange().text = text;
			}
		}
	};

	$.fn.textrange = function(method) {
		if (typeof browserType === 'undefined') {
			browserType = 'selectionStart' in this[0] ? 'xul' : document.selection ? 'msie' : 'unknown';
		}

		// I don't know how to support this browser. :c
		if (browserType === 'unknown') {
			return this;
		}

		// Prevents unpleasant behaviour for textareas in IE:
		// If you have a textarea which is too wide to be displayed entirely and therfore has to be scrolled horizontally,
		// then typing one character after another will scroll the page automatically to the right at the moment you reach
		// the right border of the visible part. But calling the focus function causes the page to be scrolled to the left
		// edge of the textarea. Immediately after that jump to the left side, the content is scrolled back to the cursor
		// position, which leads to a flicker page every time you type a character.
		if (document.activeElement !== this[0]) {
			this[0].focus();
		}

		if (typeof method === 'undefined' || typeof method !== 'string') {
			return textrange.get.apply(this);
		}
		else if (typeof textrange[method] === 'function') {
			return textrange[method].apply(this, Array.prototype.slice.call(arguments, 1));
		}
		else {
			$.error("Method " + method + " does not exist in jQuery.textrange");
		}
	};
})(jQuery);

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'js/talk.autocomplete.js' */
(function($) {

    window.TalkAutocomplete = {
        mentionCursor:  new Cursores(new RegExp('(?:^|\\s)(@[^@]*)')),
        linkSearchCursor: new Cursores(new RegExp('(?:^|\\s)(\\[[^\\[\\]~]*)'), new RegExp('(.)')),
        linkInsertCursor: new Cursores(new RegExp('(?:^|\\s)(\\[[^\\[\\]]*)'), new RegExp('([^\\].]*)')),
        linkAutoCompleteEnabled: false,
        mentionAutoCompleteEnabled: false,

        init: function($textarea) {
            if ($.browser.msie  && parseInt($.browser.version, 10) <= 8) {
                return;
            }

            var t = this;
            $(document).click(function() {
                t.removeSuggestions();
            });

            t.bindTextAreaEvents($textarea);
        },

        bindTextAreaEvents: function($textarea) {
            this.bindTextAreaSuggestionsNavigation($textarea);
            this.bindTextAreaAutocomplete($textarea);
            this.bindTextAreaLinkAutoconvert($textarea);
        },

        bindTextAreaSuggestionsNavigation: function($textarea) {
            $textarea.keydown(function(e) {
                var $suggestions = $('.gd-suggestions');
                if ($suggestions.length > 0) {
                    if ($.inArray(e.which, [13, 27, 38, 40]) >= 0) {
                        e.preventDefault();
                        e.stopPropagation();
                    }

                    // Enter
                    if (e.which == 13) {
                        $('.gd-suggestion-active').find('.gd-suggestion').click();
                    }

                    // Escape
                    if (e.which == 27) {
                        $suggestions.remove();
                    }

                    // Up
                    if (e.which == 38) {
                        var $prev = $('.gd-suggestion-active').removeClass('gd-suggestion-active').prev('li');
                        if ($prev.length == 0) {
                            $prev = $suggestions.find("li:last");
                        }
                        $prev.addClass("gd-suggestion-active");
                    }

                    // Down
                    if (e.which == 40) {
                        var $next = $('.gd-suggestion-active').removeClass('gd-suggestion-active').next('li');
                        if ($next.length == 0) {
                            $next = $suggestions.find("li:first");
                        }
                        $next.addClass("gd-suggestion-active");
                    }
                }
            });
        },

        bindTextAreaAutocomplete: function($textarea) {
            var t = this;

            $textarea.keyup(function(e) {
                if (e.which == 27) {
                    t.linkAutoCompleteEnabled = false;
                    t.mentionAutoCompleteEnabled = false;
                    return;
                } else if ($.inArray(e.which, [13, 38, 40]) >= 0) {
                    return;
                }

                var mentionToken = t.mentionCursor.token($textarea[0]);
                var linkToken = t.linkSearchCursor.token($textarea[0]);

                if (t.mentionAutoCompleteEnabled && mentionToken.value.length > 2) {
                    t.showMentionSuggestions($textarea, mentionToken);
                } else if (t.linkAutoCompleteEnabled && linkToken.value.length > 2) {
                    t.showLinkSuggestions($textarea, linkToken);
                } else {
                    t.removeSuggestions();
                }
            }).keypress(function(e) {
                if (e.which == 64) {
                    t.mentionAutoCompleteEnabled = true;
                } else if (e.which == 91) {
                    var pos = $textarea.getCursorPosition();
                    $textarea.insertAtCaret(']');
                    $textarea.setCursorPosition(pos);
                    t.linkAutoCompleteEnabled = true;
                }
            });
        },

        bindTextAreaLinkAutoconvert: function($textarea) {
            $textarea.bind('paste', function() {
                var orig = $textarea.val();
                var selected = $textarea.textrange();

                setTimeout(function () {
                    var pasted = TalkStringHelper.textDiff(orig, $textarea.val(), selected);

                    if (TalkStringHelper.isUrl(pasted.string)) {
                        if (selected.length){
                            $textarea.val(orig);
                            $textarea.textrange('set', selected.start, selected.length);
                            $textarea.textrange('replace', "[" + selected.text + "|" + pasted.string + "]");
                            $textarea.setCursorPosition($textarea.textrange().end);
                        } else if (pasted.string.indexOf(AJS.params.baseUrl) == 0) {
                            $.ajax({
                                url: pasted.string,
                                success: function(data) {
                                    var page = $(data);
                                    var meta = page.filter('meta[name="ajs-page-title"]');
                                    var title = meta.length ? meta.attr('content') : page.filter("title").text();

                                    $textarea.val(orig);
                                    $textarea.setCursorPosition(pasted.start);
                                    $textarea.insertAtCaret("[" + title + "|" + pasted.string + "]");
                                }
                            });
                        }
                    }
                }, 100);
            }).bind('drop dragdrop', function(e) {
                if (!$textarea.hasClass('macro-param-input')) {
                    $textarea.focus();

                    var files = e.originalEvent.dataTransfer.files;
                    var selected = $textarea.textrange();

                    if (files.length == 1 && selected.length) {
                        $textarea.textrange('replace', "[" + selected.text + "|" +
                            AJS.params.spaceKey + ":" + AJS.params.pageTitle + "^" + files[0].name  + "]");
                        $textarea.setCursorPosition($textarea.textrange().end);
                    } else {
                        $.each(files, function(i, file) {
                            $textarea.insertAtCaret("[" + AJS.params.spaceKey + ":" + AJS.params.pageTitle + "^" + file.name + "] ");
                        });
                    }

                    $textarea.trigger("keydown").trigger("keyup");


                    $(window).one('beforeunload', function() {
                        setTimeout(function() {
                            window.stop();
                            $textarea.focus();
                        }, 50);
                    });
                }
            });
        },

        bindSuggestionEvent: function($textarea, suggestions, isMention) {
            var t = this;

            suggestions.click(function() {
                var $suggestion = $('.gd-suggestion', this);
                if ($suggestion.length > 0) {
                    var markup = $suggestion.attr('data-wiki-link');
                    if (isMention) {
                        t.mentionCursor.replace($textarea[0], markup);
                        t.mentionAutoCompleteEnabled = false;
                    } else {
                        t.linkInsertCursor.replace($textarea[0], markup.substr(0, markup.length - 1));
                        $textarea.setCursorPosition($textarea.getCursorPosition() + 1);
                    }

                    t.removeSuggestions();
                    $textarea.focus();
                }
                return false;
            });

            suggestions.hover(function() {
                $('.gd-suggestion-active').removeClass('gd-suggestion-active');
                $(this).addClass('gd-suggestion-active');
            }, function() {
            });
        },

        showMentionSuggestions: function($textarea, mentionToken) {
            var t = this;

            var query = mentionToken.value.substr(1);
            var data = {
                'max-results': 10,
                'query': query
            };

            t.showSuggestions($textarea, query, '/rest/prototype/1/search/user.json', data, true);
        },

        showLinkSuggestions: function($textarea, linkToken) {
            var t = this;
            var query = linkToken.value.substr(1, linkToken.value.length - 2);
            var spaceKey = "";
            var parts = query.split(':');

            if (parts.length > 1 && parts[0].match(/[^a-zA-Z1-9]+/) == null && parts[0].length + 1 < query.length) {
                spaceKey = parts[0];
                query = query.replace(parts[0] + ":", "");
            }

            query = query.trim();

            if (query.length == 0) {
                return;
            }

            var data = {
                'max-results': 10,
                query: query,
                search: "name",
                preferredSpaceKey: AJS.Meta.get('space-key'),
                spaceKey: spaceKey
            };

            t.showSuggestions($textarea, query, "/rest/prototype/1/search.json", data, false);
        },

        showSuggestions: function($textarea, query, url, data, isMention) {
            var t = this;

            $.ajax({
                type: 'GET',
                cache: false,
                url: Confluence.getContextPath() + url,
                data: data,
                dataType: 'json',
                success: function(data) {
                    t.removeSuggestions();

                    if (isMention) {
                        $('body').append(TalkMention.suggestions({
                            suggestions: data.result,
                            query: query
                        }));
                    } else {
                        var result;
                        if (data.group.length) {
                            var groups = $.grep(data.group, function(group) {
                                return group.name == "content" || group.name == "attachment" || group.name == "spacedesc";
                            });
                            result = groups[0].result;

                            if (groups.length > 1) {
                                $.merge(result, groups[1].result);
                                if (groups.length > 2) {
                                    $.merge(result, groups[2].result);
                                }
                            }
                        } else {
                            result = data.group;
                        }

                        $('body').append(TalkLink.suggestions({
                            suggestions: result,
                            query: query
                        }));
                    }

                    $(".gd-suggestions").css('width', $textarea.innerWidth() + 'px')
                        .offset({
                            top: $textarea.offset().top + $textarea.outerHeight() + 2,
                            left: $textarea.offset().left
                        });

                    var suggestions = $('.gd-suggestions li');
                    var highlighter = new Confluence.Highlighter(query.split(' '));

                    $.each(suggestions, function() {
                        var suggestion = $(this).find('.gd-suggestion');

                        if (suggestion.length) {
                            suggestion.html(highlighter.highlight(suggestion.html()));
                            TalkStringHelper.truncateText($(this), suggestion, 0);
                        }
                    });

                    t.bindSuggestionEvent($textarea, suggestions, isMention);

                    $('.gd-suggestions li:first').addClass("gd-suggestion-active");
                },
                error: function () {
                    t.removeSuggestions();
                    AJS.log("Unable to find " + isMention ? "users" : "pages" + " for query {" + query + "}");                                   }
            });
        },

        removeSuggestions: function() {
            $('.gd-suggestions').remove();
        }
    };

})(AJS.$);
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'soy/talk.mention.soy' */
// This file was automatically generated from talk.mention.soy.
// Please don't edit this file by hand.

if (typeof TalkMention == 'undefined') { var TalkMention = {}; }


TalkMention.suggestions = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div class="gd-suggestions gd-mention"><ol>');
  if (opt_data.suggestions.length > 0) {
    var suggestionList6 = opt_data.suggestions;
    var suggestionListLen6 = suggestionList6.length;
    for (var suggestionIndex6 = 0; suggestionIndex6 < suggestionListLen6; suggestionIndex6++) {
      var suggestionData6 = suggestionList6[suggestionIndex6];
      output.append('<li><img src="', soy.$$escapeHtml(suggestionData6.thumbnailLink.href), '" class="gd-suggestion-thumbnail"><span class="gd-suggestion" data-wiki-link="[~', soy.$$escapeHtml(suggestionData6.username), ']">', soy.$$escapeHtml(suggestionData6.title), '</span></li>');
    }
  } else {
    output.append('<li><span class="gd-no-results">Found no matching users for <strong>', soy.$$escapeHtml(opt_data.query), '</strong></span></li>');
  }
  output.append('</ol></div>');
  return opt_sb ? '' : output.toString();
};

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'soy/talk-link.soy' */
// This file was automatically generated from talk-link.soy.
// Please don't edit this file by hand.

if (typeof TalkLink == 'undefined') { var TalkLink = {}; }


TalkLink.suggestions = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div class="gd-suggestions"><ol>');
  if (opt_data.suggestions.length > 0) {
    var suggestionList6 = opt_data.suggestions;
    var suggestionListLen6 = suggestionList6.length;
    for (var suggestionIndex6 = 0; suggestionIndex6 < suggestionListLen6; suggestionIndex6++) {
      var suggestionData6 = suggestionList6[suggestionIndex6];
      output.append('<li>');
      var class__soy8 = new soy.StringBuilder((suggestionData6.type == 'attachment') ? soy.$$escapeHtml(suggestionData6.iconClass) : (suggestionData6.type == 'space') ? 'content-type-spacedesc' : 'content-type-' + soy.$$escapeHtml(suggestionData6.type));
      class__soy8 = class__soy8.toString();
      var title__soy17 = new soy.StringBuilder((suggestionData6.type == 'space') ? soy.$$escapeHtml(suggestionData6.title) : soy.$$escapeHtml(suggestionData6.title) + ' (' + soy.$$escapeHtml(suggestionData6.space.title) + ')');
      title__soy17 = title__soy17.toString();
      output.append('<a class="', soy.$$escapeHtml(class__soy8), ' link-suggestion"><span class="gd-suggestion" title="', soy.$$escapeHtml(title__soy17), '" data-wiki-link="', soy.$$escapeHtml(suggestionData6.wikiLink), '">', soy.$$escapeHtml(suggestionData6.title), '</span></a></li>');
    }
  } else {
    output.append('<li><span class="gd-no-results">Found no matching pages for <strong>', soy.$$escapeHtml(opt_data.query), '</strong></span></li>');
  }
  output.append('</ol></div>');
  return opt_sb ? '' : output.toString();
};

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'js/talk.js' */
(function($) {

    window.Talk = {
    };

    Talk.Events = {

        bindCommentEvents: function(item) {
            var t = this;

            t.bindResolveCommentEvent(item);
            t.bindRestoreCommentEvent(item);
            t.bindAddReplyEvent(item.comment);
            t.bindRepliesEvents(item.comment);
            t.bindResizeCommentEvent(item.comment);
            t.bindUIEvents(item.comment);
            t.bindEditRestrictions(item.comment);
            t.bindFavoriteEvents(item.comment);
            t.bindNavigation(item);
            t.bindModifiedEvent(item);
        },

        bindRepliesEvents: function($comment) {
            var t = this;
            $('.gd-reply', $comment).each(function() {
                t.bindReplyEvents($comment, $(this));
            });
        },

        bindReplyEvents: function($comment, $reply) {
            var t = this;
            t.bindEditReplyEvent($comment, $reply);
            t.bindDeleteReplyEvent($comment, $reply);
            t.bindCollapseReplyEvent($reply);
        },

        bindEditReplyEvent: function($comment, $reply) {
            var t = this;

            var $pane = $('.gd-input', $reply);
            var $textarea = $('.gd-input-textarea', $reply);
            var $previewBtn = $('.gd-input-preview', $reply);
            var $editBtn = $('.gd-input-edit', $reply);
            var $previewPane = $('.gd-reply-preview', $reply);

            t.bindTextareaEvents($textarea);
            t.bindPreviewEvent($reply);

            $('.gd-reply-edit', $reply).click(function() {
                $textarea.val($('.gd-input-textarea-markup', $reply).val());
                $('.gd-reply-control, .gd-reply-body', $reply).hide();
                $pane.addClass('gd-input-typing').show();
                $textarea.show();
//                todo временно отключаем
//                $previewBtn.show();
                $editBtn.hide();
                $textarea.change();
            });

            $('.gd-input-cancel', $reply).click(function() {
                $previewPane.hide();
                $('.gd-reply-body', $reply).show();
                $('.gd-reply-control', $reply).css('display', '');
                $pane.removeClass('gd-input-typing').hide();
            });

            var $spinner = $('.gd-input-spinner', $pane);
            $('.gd-input-post', $pane).click(function() {
                var postBtn = $(this);
                if (postBtn.hasClass('gd-button-disabled')) return false;

                postBtn.addClass('gd-button-disabled');

                var data = $textarea.serialize()
                    + "&commentId=" + $comment.attr('id')
                    + "&replyId=" + $reply.attr('id').substring(9)
                    + "&contentId=" + Talk.Comments.getContentId($comment.attr('id'));

                $spinner.show();
                $textarea.attr('disabled', true);

                Talk.REST.send({
                    type: 'POST',
                    resource: "comments/reply/edit",
                    data: data,
                    success: function (data) {
                        var $newReply = $(Talk.reply({
                            reply: data,
                            resolved: false
                        }));

                        t.bindReplyEvents($comment, $newReply);
                        $reply.replaceWith($newReply);
                        Confluence.Binder.userHover();
                    },
                    complete: function() {
                        postBtn.removeClass('gd-button-disabled');
                        $spinner.hide();
                        $textarea.attr('disabled', false);
                    }
                });
            });
        },

        bindDeleteReplyEvent: function($comment, $reply) {
            var t = this;
            $('.gd-reply-delete', $reply).click(function() {

                if ($('[id^="gd-reply-"]', $comment).length == 1) {
                    $('.gd-resolve-button', $comment).click();
                    return;
                }

                t.bindConfirmationEvent({
                    parent: $reply,
                    pane: Talk.deleteReplyConfirmation(),
                    onConfirm: function () {
                        Talk.REST.send({
                            resource: "comments/reply/delete",
                            data: {
                                replyId: $reply.attr('id').substring(9),
                                commentId: $comment.attr('id'),
                                contentId: Talk.Comments.getContentId($comment.attr('id'))
                            },
                            success: function () {
                                $reply.remove();
                                Talk.Compatibility.fixDocumentationTheme();
                            }
                        });
                    }
                });
            });
        },

        bindCollapseReplyEvent: function($reply) {
            $reply.find(".gd-reply-show-more").click(function() {
                $reply.removeClass("collapsed");
                return false;
            });
            $reply.find(".gd-reply-show-less").click(function() {
                $reply.addClass("collapsed");
                return false;
            });
        },

        bindResolveCommentEvent: function(item) {
            var t = this;
            $('.gd-resolve-button', item.comment).click(function() {
                t.bindConfirmationEvent({
                    parent: item.comment,
                    pane: Talk.resolveCommentConfirmation(),
                    onConfirm: function () {
                        if ($('body.create').length) {
                            Talk.Comments.removeComment(item);
                        } else {
                            Talk.REST.send({
                                resource: "comments/comment/resolve",
                                data: {
                                    commentId: item.comment.attr('id'),
                                    contentId: Talk.Comments.getContentId(item.comment.attr('id')),
                                    isEditor: Talk.Helper.isEditor()
                                },
                                success: function () {
                                    if (Talk.Helper.isProfilePage()) {
                                        item.comment.find('.talk-favorite-icon.talk-star').click();
                                        item.icon.parents('tr').eq(0).remove();
                                    }
                                    Talk.Comments.removeComment(item);
                                }
                            });
                        }
                    },
                    onAlt: function() {
                        Talk.Updater.update(false);

                        Talk.REST.send({
                            resource: "comments/comment/archive",
                            data: {
                                commentId: item.comment.attr('id'),
                                contentId: Talk.Comments.getContentId(item.comment.attr('id')),
                                archive: true
                            },
                            success: function (data) {
                                var $reply = $(Talk.reply({
                                    reply: data,
                                    resolved: false
                                }));
                                t.bindReplyEvents(item.comment, $reply);

                                $('.gd-reply-container', item.comment).append($reply);

                                Talk.Compatibility.fixDocumentationTheme();
                                t.styleArchive(item);
                                Talk.Navigator.updateCommentsCounter();
                            }
                        });
                    }
                });
            });
        },

        styleArchive: function(item) {
            item.comment.addClass("talk-archived");
            Talk.Comments.setIconState(item, "archived");
            item.comment.find('#gd-shadow').remove();
            item.comment.find('.talk-restricted').attr('title',
                "\u041E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440 \u0434\u0438\u0441\u043A\u0443\u0441\u0441\u0438\u0438" + " " +
                    "\u041A\u043B\u0438\u043A\u043D\u0438\u0442\u0435, \u0447\u0442\u043E\u0431\u044B \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u043F\u0440\u0430\u0432\u0430 \u0434\u043E\u0441\u0442\u0443\u043F\u0430");
            Talk.Events.bindEditRestrictions(item.comment);
        },

        bindRestoreCommentEvent: function(item) {
            var t = this;
            $('.gd-restore-button', item.comment).click(function() {
                t.bindConfirmationEvent({
                    parent: item.comment,
                    pane: Talk.restoreCommentConfirmation(),
                    onConfirm: function() {
                        Talk.Updater.update(false);

                        Talk.REST.send({
                            resource: "comments/comment/archive",
                            data: {
                                commentId: item.comment.attr('id'),
                                contentId: Talk.Comments.getContentId(item.comment.attr('id')),
                                archive: false
                            },
                            success: function (data) {
                                var $reply = $(Talk.reply({
                                    reply: data,
                                    resolved: false
                                }));
                                t.bindReplyEvents(item.comment, $reply);

                                $('.gd-reply-container', item.comment).append($reply);

                                Talk.Compatibility.fixDocumentationTheme();
                                t.styleRestore(item);
                                Talk.Navigator.updateCommentsCounter();
                            }
                        });
                    }
                });
            });
        },

        styleRestore: function(item) {
            item.comment.removeClass("talk-archived");
            Talk.Comments.setIconState(item, "restored");
            item.comment.find('#gd-shadow').remove();
            item.comment.find('.talk-restricted').attr('title',
                "\u041E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440 \u0434\u0438\u0441\u043A\u0443\u0441\u0441\u0438\u0438" + " " +
                    "\u041A\u043B\u0438\u043A\u043D\u0438\u0442\u0435, \u0447\u0442\u043E\u0431\u044B \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C\/\u0438\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u043F\u0440\u0430\u0432\u0430 \u0434\u043E\u0441\u0442\u0443\u043F\u0430");
            Talk.Events.bindEditRestrictions(item.comment);
        },

        bindConfirmationEvent: function(options) {
            var $confirmation = $(options.pane);

            $('#gd-shadow-cancel', $confirmation).click(function() {
                $confirmation.remove();
            });

            $('#gd-shadow-confirm', $confirmation).click(options.onConfirm);

            $('#gd-shadow-alt', $confirmation).click(options.onAlt);

            $confirmation.appendTo(options.parent)
                .width(options.parent.outerWidth())
                .height(options.parent.outerHeight())
                .show();
        },

        bindAddReplyEvent: function($comment) {
            var t = this;
            var $pane = $('.gd-input-pane', $comment);
            var $textarea = $('.gd-input-textarea', $pane);
            var $replyBtn = $('.gd-input-post', $pane);
            var $previewBtn = $('.gd-input-preview', $pane);
            var $editBtn = $('.gd-input-edit', $pane);
            var $previewPane = $('.gd-reply-preview', $pane);

            t.bindTextareaEvents($textarea);
            t.bindPreviewEvent($pane);

            $textarea.focus(function() {
                if (!$pane.hasClass('gd-input-typing')) {
                    $textarea.val("");
                    $pane.addClass('gd-input-typing');
                    $replyBtn.addClass('gd-button-disabled');
                    $editBtn.hide();
//                    todo временно отключаем
//                    $previewBtn.addClass('gd-button-disabled').show();
                }
            });

            $('.gd-input-cancel', $pane).click(function() {
                $textarea.val("\u041D\u0430\u043F\u0438\u0448\u0438\u0442\u0435 \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439...").height(26).show();
                $pane.removeClass('gd-input-typing');
                $previewPane.hide();
            });

            var $spinner = $('.gd-input-spinner', $pane);
            $replyBtn.click(function() {
                if ($replyBtn.hasClass('gd-button-disabled')) return false;

                Talk.Updater.update(false);

                $replyBtn.addClass('gd-button-disabled');

                var data = $textarea.serialize()
                    + "&commentId=" + $comment.attr('id')
                    + "&contentId=" + Talk.Comments.getContentId($comment.attr('id'));

                $spinner.show();
                $textarea.attr('disabled', true);

                Talk.REST.send({
                    type: "POST",
                    resource: "comments/reply/add",
                    data: data,
                    success: function (data) {
                        var $reply = $(Talk.reply({
                            reply: data,
                            resolved: false
                        }));
                        t.bindReplyEvents($comment, $reply);

                        $('.gd-reply-container', $comment).append($reply);
                        $('.gd-input-cancel', $pane).click();

                        Talk.Compatibility.fixDocumentationTheme();
                        Confluence.Binder.userHover();
                    },
                    complete: function() {
                        $replyBtn.removeClass('gd-button-disabled');
                        $spinner.hide();
                        $textarea.attr('disabled', false);
                    }
                });
            });
        },

        bindPreviewEvent: function($pane) {
            var $textarea = $('.gd-input-textarea', $pane);
            var $previewBtn = $('.gd-input-preview', $pane);
            var $editBtn = $('.gd-input-edit', $pane);
            var $previewPane = $('.gd-reply-preview', $pane);

            $editBtn.click(function() {
                $(this).hide();
                $previewBtn.show();
                $previewPane.hide();
                $textarea.show();
            });

            $previewBtn.click(function() {
                if ($previewBtn.hasClass('gd-button-disabled')) return false;

                var data = $textarea.serialize() + "&contentId=" + getContentId();

                Talk.REST.send({
                    type: 'GET',
                    resource: 'comments/reply/preview',
                    data: data,
                    success: function(data) {
                        $previewBtn.hide();
                        $editBtn.show();
                        $previewPane.html(data.htmlText).show();
                        $textarea.hide();
                    }
                });
            });
        },

        bindTextareaEvents: function($textarea) {
            $textarea.bind("propertychange keyup input paste", function(e) {
                var $btn = $('.gd-input-active', $textarea.parent());

                if ($textarea.val().length > 0) {
                    $btn.removeClass('gd-button-disabled');
                    if (e.ctrlKey && e.keyCode == 13) {
                        $textarea.blur();
                        $('.gd-input-buttons-post', $textarea.parent()).click();
                    }
                } else {
                    $btn.addClass('gd-button-disabled');
                }
            });
            $textarea.autoResize({
                animate: false,
                extraSpace: 26
            });

            TalkAutocomplete.init($textarea);
        },

        bindResizeCommentEvent: function($comment) {
            $comment.bind('ba-resize', function() {
                Talk.Comments.relocateComments(Talk.Comments.getActiveCommentId());
            });
        },

        bindUIEvents: function ($comment) {
            $('.gd-button', $comment).hover(function () {
                $(this).addClass('gd-button-hover');
            }, function () {
                $(this).removeClass('gd-button-hover');
            });
        },

        bindEditRestrictions: function($comment) {
            if (!AJS.params.remoteUser) {
                return;
            }

            var commentId = $comment.attr('id');
            var restrictionsIcon = $('.talk-restrictions', $comment);
            var dialogId = commentId + "-restrictions-dialog";

            var arrowOffsetX = 16;
            if (Talk.Helper.isDefaultTheme()) {
                arrowOffsetX = 7;
            }

            var opts = {hideDelay: 10000000, noBind: true, offsetX: -280, arrowOffsetX: arrowOffsetX, initCallback: Talk.Restrictions.bindEvents};

            var popup = AJS.InlineDialog(restrictionsIcon, dialogId, function(contents, trigger, showPopup) {
                contents.html(Talk.permissionsDialog({commentId: commentId, editable: restrictionsIcon.hasClass('editable') && !$comment.hasClass('talk-archived')})) ;
                showPopup();
            }, opts);

            restrictionsIcon.unbind('click.talk').bind('click.talk', function(e) {
                var target = e.originalEvent ? $(e.originalEvent.target) : $(e.target);
                if (!target.hasClass('talk-restriction-icon')) {
                    return;
                }
                $comment.click();
                e.stopPropagation();

                if (commentId == 'talk-insert') {
                    Talk.Restrictions.showDialog(popup, Talk.Inserter.commentParams, commentId);
                } else {
                    Talk.REST.send({
                        type: 'GET',
                        resource: 'comments/comment/params',
                        data: {
                            commentId: commentId,
                            contentId: Talk.Comments.getContentId(commentId)
                        },
                        success: function(data) {
                            Talk.Restrictions.showDialog(popup, data, commentId);
                        }
                    });
                }
            });
        },

        bindFavoriteEvents: function($comment) {
            $comment.find('.talk-restrictions').unbind('click.talk-fav').bind('click.talk-fav', function(e) {
                var target = e.originalEvent ? $(e.originalEvent.target) : $(e.target);
                if (!target.hasClass('talk-favorite-icon')) {
                    return;
                }

                $comment.click();

                var commentId = $comment.attr('id');
                var favorite = target.hasClass('talk-unstar');

                Talk.REST.send({
                    type: 'POST',
                    resource: 'comments/settings/favorite',
                    data: {
                        commentId: commentId,
                        contentId: Talk.Comments.getContentId(commentId),
                        favorite: favorite
                    },
                    success: function() {
                        if (favorite) {
                            var favIcon = $(Talk.favoriteIcon());
                            target.before(favIcon);
                            if (Talk.Settings.isFavFD) {
                                var opts = {noBind: true, offsetX: -240, arrowOffsetX: 0, hideDelay: 1000000, initCallback: function() {
                                    $('#talk-fav-fd-showme').click(function() {
                                        $('#user-menu-link').click();
                                        var favLink = $('#favorite-talks-link').addClass('active');
                                        $('html, body').animate({
                                            scrollTop: 0
                                        }, 200);

                                        var optsEnd = {noBind: true, hideDelay: 1000000, initCallback: function() {
                                            var popup = this;

                                            $('#talk-fav-feature-close').click(function() {
                                                Talk.REST.send({
                                                    type: 'POST',
                                                    resource: 'comments/settings/fav-fd'
                                                });
                                                Talk.Settings.isFavFD = false;
                                                popup.hide();
                                                return false;
                                            });
                                        }};

                                        var popupEnd = AJS.InlineDialog(favLink, "talk-fav-fd-end", function(contents, trigger, showPopup) {
                                            contents.html(Talk.favFDEnd()) ;
                                            showPopup();
                                        }, optsEnd);

                                        popupEnd.show();

                                        return false;
                                    });
                                }};

                                var popup = AJS.InlineDialog(favIcon, "talk-fav-fd", function(contents, trigger, showPopup) {
                                    contents.html(Talk.favFD()) ;
                                    showPopup();
                                }, opts);

                                popup.show();
                            }
                        } else {
                            target.before(Talk.notFavoriteIcon());
                        }
                        target.remove();
                        if (Talk.Helper.isProfilePage()) {
                            var parent = $('.entity-favourites[data-comment-id="' + commentId + '"]');
                            var removeFavIcon = parent.find('.icon-remove-fav');
                            var addFavIcon = parent.find('.icon-add-fav');

                            if (favorite) {
                                addFavIcon.addClass('hidden');
                                removeFavIcon.removeClass('hidden');
                            } else {
                                removeFavIcon.addClass('hidden');
                                addFavIcon.removeClass('hidden');
                            }
                        }
                    }
                });
            });
        },

        bindNavigation: function(item) {
            item.comment.find('.talk-up').click(function() {
                Talk.Comments.setActiveCommentId(item.id);
                Talk.Navigator.up();
                return false;
            });
            item.comment.find('.talk-down').click(function() {
                Talk.Comments.setActiveCommentId(item.id);
                Talk.Navigator.down();
                return false;
            });
        },

        bindModifiedEvent: function(item) {
            item.comment.bind("DOMSubtreeModified", function() {
                item.icon.find("span span").attr("data-count", item.comment.find(".gd-reply").length);
            });
        }
    };

    Talk.GlobalEvents = {

        init: function() {
            var dim = Talk.Helper.getWindowDimension();
            var content = Talk.Sidebar.getContent();
            var contentDim = {
                width : content.width(),
                height: content.height()
            };

            $(window).bind('ba-resize.talk', function() {
                var newDim = Talk.Helper.getWindowDimension();
                if (dim.width != newDim.width || dim.height != newDim.height ||
                    contentDim.width != content.width() || contentDim.height != content.height()) {
                    dim = newDim;
                    contentDim = {
                        width : content.width(),
                        height: content.height()
                    };
                    Talk.GlobalEvents.resizeEventHandler();
                }
            });

            $(document).bind('click.talk', function(e) {
                if (e.originalEvent !== undefined && e.button == 0) {
                    if(!Talk.Helper.isMacroBrowser()) {
                        Talk.URLHelper.removeCommentLinkFromURL();
                    }
                    var activeCommentId = Talk.Comments.getActiveCommentId();
                    Talk.Comments.focus(activeCommentId, false);
                }
            });

            $(window).bind('load.talk', function() {
                Talk.Comments.relocateComments(Talk.Comments.getActiveCommentId());
            });
        },

        destroy: function() {
            $(window).unbind('.talk');
            $(document).unbind('.talk');
        },

        resizeEventHandler: function() {
            if (Talk.Sidebar.sidebar) {
                Talk.Sidebar.updateSidebarOffset();
                Talk.Sidebar.relocateHider();
                Talk.Comments.relocateComments(Talk.Comments.getActiveCommentId());
            }
        }
    };

    Talk.Comments = {
        comments: [],
        ids: [],
        activeCommentId: null,
        focusedCommentId: null,
        idToRelocate: null,

        init: function() {
            var t = this;
            var ids = t.getIds();
            if (ids.commentIds.length == 0) {
                Talk.Compatibility.fix();
                return;
            }

            $('#talk-view-item').addClass('talks-on-page');

            var data = ids.commentIds.join("&") + "&" + ids.contentIds.join("&");

            Talk.REST.send({
                resource: "comments/comments-and-user-permissions",
                type: "POST",
                data: data,
                success: function (data) {
                    Talk.LicenseManager.setLicenseActive(data.licenseAttributes.isLicenseActive);
                    Talk.LicenseManager.setEvalExpiring(data.licenseAttributes.isEvalExpiring);
                    t.insertCommentsToPage(data.comments);
                    Talk.Navigator.updateCommentsCounter();
                    Talk.URLHelper.detectCommentInURL();
                    Talk.Compatibility.fix();
                    Confluence.Binder.userHover();
                }
            });
        },

        getContentId: function(commentId) {
            return this.ids[commentId];
        },

        getIds: function() {
            var t = this;
            var commentIds = [];
            var contentIds = [];

            var icons = Talk.Helper.isEditor() ?
                $('#wysiwygTextarea_ifr').contents().find('img[data-macro-name="talk"]') : $('[id^="icon-talk-"]');

            icons.sort(function(comment1, comment2) {
                var top1 = t.getIconPosition($(comment1));
                var top2 = t.getIconPosition($(comment2));

                if (top1 != top2) {
                    return top1 - top2;
                }

                return $(comment1).offset().left - $(comment2).offset().left;
            }).each(function() {
                var icon = $(this);
                var commentId;
                var contentId;

                if (Talk.Helper.isEditor()) {
                    commentId = Talk.Editor.getId(icon);
                    contentId = getContentId();
                } else {
                    commentId = icon.attr('id').substring(5);
                    contentId = icon.attr('data-content-id');
                }

                var id = "commentId=" + commentId;
                if ($.inArray(id, commentIds) == -1) {
                    commentIds.push(id);
                    contentIds.push("contentId=" + contentId);
                    t.ids[commentId] = contentId;
                }
            });

            return {
                commentIds: commentIds,
                contentIds: contentIds
            };
        },

        insertCommentsToPage: function(comments) {
            var t = this;
            if (comments.length > 0) {
                Talk.Sidebar.init();

                $.each(comments, function (i, comment) {
                    if (t.idToRelocate == null && !comment.archived) {
                        t.idToRelocate = i;
                    }

                    t.insertComment(comment);
                });

                t.idToRelocate = t.idToRelocate == null ? 0 : t.idToRelocate;
                t.relocate(t.idToRelocate, false);
                t.focus(t.idToRelocate, false);

                Talk.GlobalEvents.init();
                AJS.trigger('talk.init');
            }
        },

        insertComment: function(comment) {
            var t = this;

            var $icon = Talk.Helper.isEditor() ?
                $('#wysiwygTextarea_ifr').contents().find('img[data-macro-parameters*="id=' + comment.id + '"]').filter(function() {
                    var params = $(this).attr('data-macro-parameters').split('|');
                    var found = false;
                    $.each(params, function(i, param) {
                        if (param == "id=" + comment.id) {
                            found = true;
                            return false;
                        }
                    });
                    return found;
                }) :
                $('[id="icon-' + comment.id + '"]');

            var params = {
                comment: comment,
                isLicenseActive: Talk.LicenseManager.isLicenseActive(),
                isEvalExpiring: Talk.LicenseManager.isEvalExpiring(),
                hasEditPermissions: AJS.params.remoteUser && comment.userPermissions.hasEditPermission,
                user: AJS.params.remoteUser,
                resolved: $icon.hasClass("resolved")
            };

            var $comment = $(Talk.comment(params));

            var item = {
                id: t.comments.length,
                comment: $comment,
                icon: $icon
            };

            if (Talk.Helper.isPage() || Talk.Helper.isProfilePage()) {
                t.bindRelocateEvents(item);
                Talk.Events.bindCommentEvents(item);
            }

            t.comments.push(item);
            Talk.Sidebar.addComment($comment);

            if ($comment.hasClass('talk-archived') && !$comment.hasClass('new-replies')) {
                $comment.hide();
            }
        },

        removeComment: function(item, isInsert) {
            item.comment.remove();
            item.icon.remove();
            item.resolved = true;
            Talk.Comments.setActiveCommentId(null);
            Talk.URLHelper.removeCommentLinkFromURL();
            Talk.Compatibility.fixDocumentationTheme();
            Talk.Navigator.updateCommentsCounter();
            if (Talk.Helper.isEditor()) {
                $(document).click();
            }
            if (!isInsert) {
                Talk.Compatibility.fixInPlaceEditor();
            }
            if ($('.gd-pane-view').length == 0) {
                $('#talk-view-item').removeClass('talks-on-page');
                Talk.Sidebar.destroy();
            } else if (!$('.gd-pane-view:visible').length) {
                Talk.Sidebar.hide(true);
            }
        },

        bindRelocateEvents: function (item) {
            var t = this;

            item.comment.click(function (e) {
                e.stopPropagation();
                if (Talk.Helper.isProfilePage()) {
                    t.focus(item.id, true);
                    t.relocate(item.id, true);
                } else {
                    t.relocate(item.id, true);
                    t.focus(item.id, true);
                }
                Talk.URLHelper.addCommentLinkToURL(item.icon.attr("href"));
            });

            item.icon.unbind('click.talk').bind('click.talk', function (e) {
                if (!Talk.Helper.isEditor()) {
                    e.stopPropagation();
                }
                var focus = !(item.comment.hasClass('talk-archived') && item.comment.hasClass('gd-comment-active') && !item.comment.hasClass('new-replies'));
                t.focus(item.id, focus);
                t.relocate(item.id, focus);
                Talk.URLHelper.addCommentLinkToURL(item.icon.attr("href"));
            });
        },

        focus: function(index, focused) {
            var t = this;

            if (Talk.Helper.isProfilePage()) {
                $('tr.active-talk').removeClass('active-talk');
            }

            if (t.comments.length > 0) {
                var item = this.comments[index];
                if (item.resolved) {
                    return;
                }

                if (focused) {
                    item.comment.show();
                    item.comment.addClass('gd-comment-active');
                    t.setIconState(item, "active");
                    item.comment.find('.collapsed').removeClass('collapsed');

                    if ($('.gd-content-offset-hidden').length) {
                        Talk.Settings.showTalks(index, true);
                    }

                    if (t.focusedCommentId != index) {
                        t.focusedCommentId = index;
                        if (Talk.Helper.isEditor()) {
                            $('#wysiwygTextarea_ifr').contents().scrollTop(
                                t.getIconPosition(item.icon) - $('#rte').offset().top + $("#wysiwygTextarea_ifr").contents().scrollTop() - 100
                            );
                        } else if (!Talk.Helper.isDocumentationTheme() && !Talk.Helper.isScrollVersions()) {
                           $('html, body').animate({
                                scrollTop: t.getIconPosition(item.icon) - 100
                            }, 400);
                        } else {
                            var content = Talk.Helper.isDocumentationTheme() ? $('#splitter-content') : $('.sv-theme-content');
                            content.animate({
                                scrollTop: t.getIconPosition(item.icon) - $('.wiki-content').offset().top + $('#sv-infoline-container').height()
                            }, 400);
                        }
                    }

                    if (Talk.Helper.isProfilePage()) {
                        item.icon.parents('tr').eq(0).addClass('active-talk');
                    }
                } else {
                    t.focusedCommentId = null;
                    item.comment.removeClass('gd-comment-active');
                    t.setIconState(item, "inactive");
                    if(item.comment.hasClass('talk-archived') && !item.comment.hasClass('new-replies')) {
                        t.activeCommentId = null;
                        item.comment.hide();
                        t.relocate(t.getActiveCommentId());
                        if (!$('.gd-pane-view:visible').length) {
                            Talk.Sidebar.hide(true);
                        }
                    }
                }

                item.comment[0].style['left'] = focused ? '-10px' : '10px';
            }
        },

        relocate: function(index, active) {
            var t = this;

            if (t.activeCommentId != null && t.activeCommentId == index)
                return;

            if (active)
                t.activeCommentId = index;

            t.relocateComments(index);
        },

        relocateComments: function(index) {
            var t = this;
            if (t.isCommentsExists()) {
                t.relocateFocusedComment(index);
                t.relocateCommentsBelow(index);
                t.relocateCommentsAbove(index);
                Talk.Compatibility.fixDocumentationTheme();
                Talk.Editor.fixHeight();
                AJS.trigger('talkRelocate');
            }
        },

        relocateFocusedComment: function(index) {
            var t = this;
            var item = t.comments[index];

            if (item.resolved || (item.comment.hasClass('talk-archived') && !item.comment.hasClass('gd-comment-active') && !item.comment.hasClass('new-replies'))) {
                return;
            }

            t.showComment(item.comment);
            t.removeCollapsible(item.comment);

            item.comment[0].style['top'] = (t.getIconPosition(item.icon) - Talk.Sidebar.offset.top) + 'px';

            if (t.comments.length > index + 1 &&
                item.comment.offset().top + item.comment[0].clientHeight + 20 > t.getIconPosition(t.comments[index + 1].icon)) {
                t.updateCommentCollapsible(item.comment);
            } else if (t.comments.length == index + 1) {
                t.collapseLastComment(item);
            }
        },

        relocateCommentsBelow: function (index) {
            var t = this;
            var first = t.comments[index].comment;
            var nextTop = first.is(':visible') ? first.offset().top + first[0].clientHeight + 20 : 0;

            for (var i = index + 1; i < t.comments.length; i++) {
                var item = t.comments[i];
                item.comment[0].classList.remove('gd-comment-active');
                t.setIconState(item, "inactive");

                if (item.comment.hasClass('talk-archived') && !item.comment.hasClass('new-replies')) {
                    item.comment.hide();
                } else if (!item.resolved) {
                    t.showComment(item.comment);
                    t.removeCollapsible(item.comment);
                    nextTop = Math.max(nextTop, t.getIconPosition(item.icon));

                    item.comment[0].style['top'] = (nextTop - Talk.Sidebar.offset.top) + 'px';
                    item.comment[0].style['left'] = '10px';

                    if (t.comments.length > i + 1 &&
                        nextTop + item.comment[0].clientHeight + 20 > t.getIconPosition(t.comments[i + 1].icon)) {
                        t.updateCommentCollapsible(item.comment);
                    } else if (t.comments.length == i + 1) {
                        t.collapseLastComment(item);
                    }

                    nextTop += item.comment[0].clientHeight + 20;
                }
            }
        },

        relocateCommentsAbove: function (index) {
            var t = this;
            var navigation;
            var parentNav;
            var parentCss;
            var headerPH = $('#main-header-placeholder');

            if (Talk.Helper.isEditor()) {
                navigation = $('#editor-precursor');
            } else if (Talk.Helper.isBrikitTheme()) {
                navigation = $('.brikit-header-container');
            } else if (Talk.Helper.isProfilePage()) {
                navigation = $('#header');
            } else if (Talk.Helper.isScrollVersions()) {
                navigation = $('#sv-infoline-container');
            } else {
                navigation = $('#navigation');
                parentNav = navigation.parent();
                parentCss = parentNav.attr('style');
                parentNav.attr('style', '');
                headerPH.hide();
            }

            if (navigation.length > 0) {
                var navigationUl = Talk.Helper.isBrikitTheme() || Talk.Helper.isProfilePage() || Talk.Helper.isScrollVersions() ? [] : navigation.find('ul');
                var navigationUlTop = navigationUl.length > 0 ?
                    parseInt(navigationUl.offset().top) - parseInt(navigationUl.css('margin-top')) : 0;

                if (Talk.Helper.isScrollVersions()) {
                    navigationUlTop = navigation.offset().top;
                }

                var navigationBottom = Math.max(parseInt(navigation.offset().top), navigationUlTop) + 1 +
                    Math.max(navigation.height(), navigationUl.length > 0 ? navigationUl.height() : 0);
            }

            var prevTop = t.comments[index].comment.is(':visible') ? t.comments[index].comment.offset().top - 20 : Number.MAX_SAFE_INTEGER;
            var isFirstToHide = true;

            for (var i = index - 1; i >= 0; i--) {
                var item = t.comments[i];

                item.comment[0].classList.remove('gd-comment-active');
                t.setIconState(item, "inactive");

                if(item.comment.hasClass('talk-archived') && !item.comment.hasClass('new-replies')) {
                    item.comment.hide();
                } else if (!item.resolved) {
                    t.showComment(item.comment);
                    t.removeCollapsible(item.comment);

                    if (i > 0 && prevTop - item.comment[0].clientHeight - 20 < t.getIconPosition(t.comments[i - 1].icon)) {
                        t.updateCommentCollapsible(item.comment);
                    }

                    prevTop -= item.comment[0].clientHeight;
                    prevTop = Math.min(prevTop, t.getIconPosition(item.icon));

                    var res = t.hideComment(item, navigation, navigationBottom, prevTop, isFirstToHide);
                    isFirstToHide = res.isFirstToHide;
                    prevTop = res.top;

                    item.comment[0].style['top'] = (prevTop - Talk.Sidebar.offset.top) + 'px';
                    item.comment[0].style['left'] = '10px';

                    prevTop -= 20;
                }
            }

            if (parentNav && parentCss) {
                parentNav.attr('style', parentCss);
                headerPH.show();
            }
        },

        hideComment: function(item, navigation, navigationBottom, top, isFirstToHide) {
            if (navigation.length > 0 && top <= navigationBottom) {
                var commentHeight = item.comment[0].clientHeight - navigationBottom + top;

                if (isFirstToHide && commentHeight > 0) {
                    item.comment.css('overflow', 'hidden')
                        .height(commentHeight)
                        .scrollTop(item.comment[0].scrollHeight)
                        .addClass('gd-pane-trimmed')
                        .find('.gd-after').css('top', item.comment.scrollTop());
                    top = navigationBottom;
                } else {
                    item.comment.hide();
                }

                isFirstToHide = false;
            }

            return {isFirstToHide: isFirstToHide, top: top};
        },

        isCommentsExists: function() {
            var t = this;
            for (var i = 0; i < t.comments.length; i++) {
                if (!t.comments[i].resolved) {
                    return true;
                }
            }
            return false;
        },

        setActiveCommentId: function(value) {
            this.activeCommentId = value;
        },

        getActiveCommentId: function() {
            return this.activeCommentId != null ? this.activeCommentId : this.idToRelocate;
        },

        showComment: function(comment) {
            comment.css('overflow', '')
                   .removeClass('gd-pane-trimmed')
                   .height("auto")
                   .show();
        },

        removeCollapsible: function(comment) {
            if (comment.hasClass('gd-comment-active') && comment.find('.gd-input-typing').length) {
                return;
            }
            comment[0].classList.remove("long-thread");
            comment.find('.gd-reply.collapsible').removeClass("collapsible");
        },

        collapseLastComment: function(item) {
            var t = this;
            var content = Talk.Sidebar.getContent();
            var pageBottom = content.offset().top + content.height();
            if (Talk.Editor.html) {
                var lastElement = Talk.Editor.html.children('body').children().last();
                var contentHeight = lastElement.height() + lastElement.offset().top;
                if (contentHeight > content.height()) {
                    pageBottom = pageBottom - content.height() + contentHeight - Talk.Editor.contents.scrollTop();
                }
            }

            if (item.comment.offset().top + item.comment[0].clientHeight > pageBottom) {
                t.updateCommentCollapsible(item.comment);
            }
        },

        updateCommentCollapsible: function(comment) {
            if (comment.hasClass('gd-comment-active') && comment.find('.gd-input-typing').length) {
                return;
            }

            var replies = comment.find('.gd-reply');

            replies.each(function() {
                var reply = $(this);
                if (reply[0].clientHeight > 200) {
                    reply[0].classList.add("collapsible");
                }
            });

            if (comment[0].clientHeight > 350 && replies.length > 2) {
                comment[0].classList.add("long-thread");
                comment.find('.gd-comment-show-all span').html(replies.length - 2);
            }
        },

        getIconPosition: function(icon) {
            var parent = icon;
            while(!parent[0].offsetParent && !parent.is(':visible') && parent.parent().offset()) {
                parent = parent.parent();
            }

            var position = parent.offset().top;
            if (Talk.Helper.isEditor()) {
                position = position + $('#rte').offset().top - $("#wysiwygTextarea_ifr").contents().scrollTop();
            }
            return position;
        },

        setIconState: function(item, state) {
            if (state == "active") {
                item.icon.addClass('gd-comment-icon-active');
            } else if (state == "inactive") {
                item.icon.removeClass('gd-comment-icon-active');
            } else if (state == "archived") {
                item.icon.addClass('talk-archived');
            } else if (state == "restored") {
                item.icon.removeClass('talk-archived');
            }

            if (Talk.Helper.isEditor()) {
                var src = item.icon.attr('src');
                if (!src) {
                    return;
                }
                var img = src.split('/');
                src = src.replace(img[img.length - 1], "");

                if (state == "active") {
                    if (item.comment.hasClass('talk-archived')) {
                        src = src + "talk-archived-open.png";
                    } else {
                        src = src + "talk-open.png";
                    }
                } else if (state == "inactive") {
                    if (item.comment.hasClass('talk-archived')) {
                        src = src + "talk-archived.png";
                    } else {
                        src = src + "talk.png";
                    }
                } else if (state == "archived") {
                    if (item.comment.hasClass('gd-comment-active')) {
                        src = src + "talk-archived-open.png";
                    } else {
                        src = src + "talk-archived.png";
                    }
                } else if (state == "restored") {
                    if (item.comment.hasClass('gd-comment-active')) {
                        src = src + "talk-open.png";
                    } else {
                        src = src + "talk.png";
                    }
                }

                item.icon.attr('src', src)
            }
        }
    };

    Talk.Sidebar = {
        sidebar: null,
        hiderContainer: null,
        offset: null,

        init: function() {
            var $content = this.getContent();
            $content.addClass('gd-content-offset');
            $('#blog-sidebar').addClass('gd-content-offset');
            $('#personal-info-sidebar').addClass('gd-content-offset');
            if (Talk.Helper.isEditor()) {
                $('#wysiwygTextarea_ifr').contents().find('html').css('margin-right', '295px').find('body').css('margin-right', '10px');
            }

            this.offset = this.getLocation();

            $('<div class="gd-comments-sidebar"/>')
                .append(this.getSidebar())
                .offset(this.offset)
                .css('position', '')
                .appendTo(Talk.Helper.isEditor() ? $content : !Talk.Helper.isScrollVersions() ? 'body' : '#full-height-container');

            this.addSidebarHider();
            Talk.Navigator.init();
        },

        getContent: function() {
            if (Talk.Helper.isZenTheme()) {
                return $('#zen-main');
            }
            if (Talk.Helper.isBrikitTheme()) {
                return $('#main-content .brikit-content-layer-table');
            }
            if (Talk.Helper.isEditor()) {
                return $('#wysiwyg');
            }
            if (Talk.Helper.isRefinedWikiTheme()) {
                return $('#rw_main_column');
            }
            if (Talk.Helper.isProfilePage()) {
                return $('form[name="favorite-talks"]');
            }
            return $('#content');
        },

        addSidebarHider: function() {
            this.hiderContainer = $(Talk.hiderContainer());
            $('.gd-comments-sidebar').append(this.hiderContainer);

            if (Talk.Settings.isHidden) {
                this.hide();
                this.hiderContainer.append(Talk.shower());
            } else {
                this.hiderContainer.append(Talk.hider());
            }

            $('#talk-hider').live('click', function() {
                Talk.Settings.hideTalks();
                return false;
            });

            $('#talk-shower').live('click', function() {
                Talk.Settings.showTalks();
                return false;
            });

            this.relocateHider();
        },

        relocateHider: function() {
            if (Talk.Settings.isHidden) {
                var main = $('.gd-content-offset-hidden');
                var offset = Talk.Helper.isEditor() ? 44 : 0;
                this.hiderContainer.offset({left: main.offset().left + main.width() + parseInt(main.css('padding-right')) - offset});
            } else {
                this.hiderContainer.offset({left: this.getLeftPosition() + 260});
            }
        },

        addComment: function($comment) {
            this.sidebar.append($comment);
        },
    
        getSidebar: function() {
            this.sidebar = $('<div class="gd-comments gd-comments-layout"><div id="gd-comments-messages"/></div>');
            return this.sidebar;
        },

        updateSidebarOffset: function() {
            this.offset = this.getLocation();
            Talk.Sidebar.sidebar.parent().offset(this.offset);
        },

        getLocation: function() {
            var $content = Talk.Helper.isEditor() ? $('#wysiwygTextarea_ifr').contents().find('body') : Talk.Sidebar.getContent();
            var offsetLeft = Talk.Helper.isBrikitTheme() ? 5 : 20;
            var contentOffset = $content.offset();

            return {
                'left': contentOffset.left + $content.width() + offsetLeft,
                'top': contentOffset.top
            }
        },

        getLeftPosition: function() {
            return this.offset.left;
        },

        remove: function() {
            this.sidebar.remove();
        },

        hide: function(hideSHContainer) {
            if (this.sidebar) {
                $('.gd-comments').hide();
                $('#talk-hider').replaceWith(Talk.shower());
                $('.gd-content-offset').removeClass('gd-content-offset').addClass('gd-content-offset-hidden');
                if (Talk.Helper.isEditor()) {
                    $('#wysiwygTextarea_ifr').contents().find('html').css('margin-right', 0).find('body').css('margin-right', '');
                    Talk.Editor.fixHeight();
                }
                Talk.Compatibility.fixZenWidth();
                $('#zen-main').css('max-width', '');
                $('#expando').unbind('click.talk');
                $('#talk-show-hide-container .talk-navigator').hide();
                if (hideSHContainer) {
                    $('#talk-show-hide-container').hide();
                }
            }
        },

        show: function() {
            if (this.sidebar) {
                $('.gd-comments').show();
                $('#talk-show-hide-container').show();
                $('#talk-shower').replaceWith(Talk.hider());
                $('.gd-content-offset-hidden').addClass('gd-content-offset').removeClass('gd-content-offset-hidden');
                if (Talk.Helper.isEditor()) {
                    $('#wysiwygTextarea_ifr').contents().find('html').css('margin-right', '295px').find('body').css('margin-right', '10px');
                    Talk.Editor.fixHeight();
                }
                $('#talk-show-hide-container .talk-navigator').show();
                Talk.GlobalEvents.resizeEventHandler();
                Talk.Compatibility.fix();
                Talk.Compatibility.fixZenWidth();
            }
        },

        destroy: function() {
            this.sidebar = null;
            $('.gd-comments-sidebar').remove();
            $('.gd-content-offset').removeClass('gd-content-offset');
            $('.gd-content-offset-hidden').removeClass('gd-content-offset-hidden');
            if (Talk.Helper.isEditor()) {
                $('#wysiwygTextarea_ifr').contents().find('html').css('margin-right', 0).find('body').css('margin-right', '');
            }
            Talk.Compatibility.fixZenWidth();
            $('#zen-main').css('max-width', '');
            Talk.GlobalEvents.destroy();
            $('#expando').unbind('click.talk').unbind('click.talk-hider');
        }
    };

    Talk.Helper = {

        body: null,

        init: function() {
            this.body = $('body');
        },

        isPage: function() {
            return AJS.Meta.get("page-id") != undefined;
        },

        isDocumentationTheme: function() {
            return $('#splitter-content').length > 0;
        },

        isZenTheme: function() {
            return $('#zen-main').length > 0;
        },

        isDefaultTheme: function() {
            return this.body.is('.theme-default');
        },

        isBrikitTheme: function() {
            return this.body.is('.brikit');
        },

        isRefinedWikiTheme: function() {
            return $('#rw_main').length > 0;
        },

        isMacroBrowser: function() {
            return $('body.content-preview').length > 0;
        },

        isEditor: function() {
            return this.body.is('.edit') || this.body.is('.create') || this.body.is('.copy-page');
        },

        isProfilePage: function() {
            return this.body.is('.profile');
        },

        isScrollVersions: function() {
            return this.body.is('.sv-theme');
        },

        getWindowDimension: function() {
            return {
                width: $(window).width(),
                height: $(window).height()
            }
        }
    };

    Talk.LicenseManager = {
        licenseActive: null,
        evalExpiring: null,

        isLicenseActive: function() {
            return this.licenseActive;
        },

        setLicenseActive: function(p) {
            this.licenseActive = p;
        },

        isEvalExpiring: function() {
            return this.evalExpiring;
        },

        setEvalExpiring: function(p) {
            this.evalExpiring = p;
        }
    };

    Talk.URLHelper = {

        detectCommentInURL: function() {
            if (window.location.hash) {
                var hash = window.location.hash;
                $("span#icon-" + hash.substring(6).replace("-reply", "")).click();
                if (hash.indexOf("-reply") > 0) {
                    Talk.Comments.comments[Talk.Comments.activeCommentId].comment.find(".gd-input-textarea").focus();
                }
            }
        },

        addCommentLinkToURL: function(link) {
            if (window.location.hash != link && !(AJS.Editor && AJS.Editor.isVisible())) {
                window.location.hash = link;
            }
        },

        removeCommentLinkFromURL: function() {
            if (window.location.hash != "" && window.location.hash != "#" && !(AJS.Editor && AJS.Editor.isVisible())) {
                var h = $(document).scrollTop();
                window.location.hash = '';
                $("body, html").scrollTop(h);
            }
        }
    };

    Talk.REST = {
        send: function(options) {
            $.ajax({
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                type: options.type || 'GET',
                async: options.async == undefined ? true : options.async,
                cache: false,
                url: Confluence.getContextPath() + '/rest/talk/1.0/' + options.resource,
                data: options.data,
                dataType: 'json',
                success: options.success,
                error: options.error || function (xhr) {
                    if (Talk.Helper.isEditor() && xhr.status == 403) {
                        Talk.Editor.init();
                        return;
                    }

                    if (Talk.Sidebar.sidebar == null) {
                        Talk.Sidebar.init();
                    }

                    var msg;
                    switch (xhr.responseText) {
                        case "merge": msg = "\u0412\u043E\u0437\u043D\u0438\u043A \u043A\u043E\u043D\u0444\u043B\u0438\u043A\u0442 \u0441\u043B\u0438\u044F\u043D\u0438\u044F \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439: \u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u003ca href=\"javascript:window.location.reload(true)\">\u043F\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435\u003c\/a> \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443 \u0438 \u0434\u043E\u0431\u0430\u0432\u044C\u0442\u0435 \u0434\u0438\u0441\u043A\u0443\u0441\u0441\u0438\u044E \u0437\u0430\u043D\u043E\u0432\u043E"; break;
                        case "not-inserted": msg = "Could not insert Talk. The section you selected may contain a macro that is not supported or user mention. Try selecting a different text section"; break;
                        case "archived": msg = "\u042D\u0442\u0430 \u0434\u0438\u0441\u043A\u0443\u0441\u0441\u0438\u044F \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043E\u0432\u0430\u043D\u0430: \u0434\u043B\u044F \u0435\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0438\u0437 \u0430\u0440\u0445\u0438\u0432\u0430"; break;
                        default: msg = "\u041F\u0440\u043E\u0438\u0437\u043E\u0448\u043B\u0430 \u043E\u0448\u0438\u0431\u043A\u0430 \u0432 \u043F\u043B\u0430\u0433\u0438\u043D\u0435 Talk. \u0421\u043C\u043E\u0442\u0440\u0438\u0442\u0435 \u043B\u043E\u0433\u0438 \u0434\u043B\u044F \u0443\u0442\u043E\u0447\u043D\u0435\u043D\u0438\u044F";
                    }

                    var errorContainer = Talk.Comments.activeCommentId == null ? "#gd-comments-messages" :
                        "#error-" + Talk.Comments.comments[Talk.Comments.activeCommentId].comment.attr('id');

                    var dialog = $('.talk-permissions-dialog:visible');
                    if (dialog.length) {
                        errorContainer = dialog;
                        $('#talk-permissions-loader', dialog).hide();
                        $('.talk-save-permissions', dialog).enable();
                    }

                    AJS.messages.warning(errorContainer, {
                        title: "Warning!",
                        body: msg
                    });
                },
                complete: options.complete
            });
        }
    };

    Talk.Editor = {

        contents: null,
        html: null,
        relocating: false,

        init: function() {
            var t = this;

            if (Talk.Helper.isEditor()) {
                t.contents = $('#wysiwygTextarea_ifr').contents();
                t.html = t.contents.children('html');

                t.bindContentEvents();

                $.each(Talk.Comments.comments, function(i, item) {
                    t.initCommentIcon(item);
                });

                $('.gd-pane-view').die("mousewheel").live("mousewheel", function(e) {
                    var delta = e.originalEvent.wheelDelta === undefined ? -40 * e.originalEvent.detail : e.originalEvent.wheelDelta;
                    t.contents.scrollTop(t.contents.scrollTop() - delta);
                });

                $('#macro-insert-list #talk').unbind('click').click(function() {
                    t.createComment();
                    return false;
                });

                $(document).unbind('scroll').bind('scroll', function() {
                    Talk.GlobalEvents.resizeEventHandler();
                });
            }
        },

        bindContentEvents: function() {
            var t = this;

            t.contents.unbind('scroll').scroll(function() {
                if (!t.relocating) {
                    t.relocating = true;
                    Talk.Comments.relocateComments(Talk.Comments.getActiveCommentId());
                    t.relocating = false;
                }
            }).unbind('ba-resize').bind('ba-resize', function() {
                if (!t.relocating) {
                    t.relocating = true;
                    setTimeout(function() {
                        Talk.GlobalEvents.resizeEventHandler();
                        t.relocating = false;
                    }, 100);
                }
            }).unbind('click').click(function(e) {
                if (!$(e.originalEvent.target).hasClass('gd-comment-icon')) {
                    Talk.Comments.focus(Talk.Comments.getActiveCommentId(), false);
                }
            }).unbind('DOMNodeInserted').bind('DOMNodeInserted', function(e) {
                var element = $(e.target);
                if (element.attr('data-macro-name') == 'talk') {
                    t.insertComment(element);
                } else {
                    var macros = $(element[0].querySelectorAll('[data-macro-name="talk"]'));
                    macros.each(function() {
                        t.insertComment($(this));
                    });
                    if (!macros.length) {
                        t.relocateComments();
                    }
                }
            }).unbind('DOMNodeRemoved').bind('DOMNodeRemoved', function(e) {
                var element = $(e.target);
                if (element.attr('data-macro-name') == 'talk') {
                    element.trigger('DOMNodeRemovedFromDocument');
                } else {
                    var macros = $(element[0].querySelectorAll('[data-macro-name="talk"]'));
                    macros.each(function() {
                        $(this).trigger('DOMNodeRemovedFromDocument');
                    });
                    if (!macros.length) {
                        t.relocateComments();
                    }
                }
            });
        },

        fixHeight: function() {
            if (Talk.Helper.isEditor()) {
                var t = this;
                var comments = Talk.Comments.comments;
                var height = 0;

                if (!t.html) {
                    t.init();
                }

                for (var i = comments.length - 1; i >= 0; i--) {
                    var item = comments[i];
                    if (!item.resolved  && item.comment.is(':visible')) {
                        height = item.comment.offset().top + item.comment[0].clientHeight + 20 - $('#rte').offset().top + t.contents.scrollTop();
                        break;
                    }
                }

                t.html.css('min-height', height + "px");
            }
        },

        relocateComments: function() {
            var t = this;
            if (!t.relocating) {
                t.relocating = true;
                setTimeout(function() {
                    Talk.Comments.relocateComments(Talk.Comments.getActiveCommentId());
                    t.relocating = false;
                }, 100);
            }
        },

        initCommentIcon: function(item) {
            item.icon.addClass("gd-comment-icon").attr("id", "icon-" + item.comment.attr("id"));
            if (item.comment.hasClass('talk-archived')) {
                item.icon.addClass('talk-archived');
            }

            this.bindDeleteCommentEvent(item);
        },

        createComment: function() {
            var permissions;
            Talk.REST.send({
                type: 'GET',
                async: false,
                resource: "permissions/default-permissions",
                data: {
                    contentId: getContentId(),
                    spaceKey: AJS.params.spaceKey
                },
                success: function(data) {
                    TalkParams.params = data;
                    TalkParams.initRestrictions();
                }
            });

            Talk.REST.send({
                type: 'POST',
                resource: "comments/comment/draft",
                data: {
                    question: "",
                    contentId: getContentId(),
                    pageVersion: $('meta[name="page-version"]').attr('content'),
                    viewableUsers: TalkParams.getNewViewableBy('user'),
                    viewableGroups: TalkParams.getNewViewableBy('group'),
                    oldViewableUsers: [],
                    oldViewableGroups: []
                },
                success: function (data) {
                    if (data) {
                        $(document).click();
                        AJS.Rte.getEditor().execCommand('mceInsertContent', true, Talk.editorMacro({commentId: data.id}));
                    }
                }
            });
        },

        insertComment: function(icon) {
            var t = this;
            var talkId = t.getId(icon);
            var isNew = true;

            $.each(Talk.Comments.comments, function(i, item) {
                if (item.comment.attr('id') == talkId) {
                    item.icon = icon;
                    t.initCommentIcon(item);
                    Talk.Comments.bindRelocateEvents(item);
                    t.relocateComments();
                    isNew = false;
                    return false;
                }
            });

            if (!isNew) {
                Talk.Comments.comments.sort(function(item1, item2) {
                    var top1 =  Talk.Comments.getIconPosition(item1.icon);
                    var top2 =  Talk.Comments.getIconPosition(item2.icon);

                    if (top1 != top2) {
                        return top1 - top2;
                    }

                    return item1.icon.offset().left - item2.icon.offset().left;
                });

                $.each(Talk.Comments.comments, function(i, item) {
                    item.id = i;
                });
            } else {
                Talk.REST.send({
                    resource: "comments/comments-and-user-permissions",
                    type: "POST",
                    async: false,
                    data: {
                        contentId: getContentId(),
                        commentId: talkId
                    },
                    success: function (data) {
                        if ($('.gd-comments-sidebar').length == 0) {
                            Talk.Sidebar.init();
                            Talk.GlobalEvents.init();
                            Talk.Compatibility.fix();
                        }

                        if (Talk.Settings.isHidden) {
                            Talk.Settings.showTalks();
                        }

                        Talk.LicenseManager.setLicenseActive(data.licenseAttributes.isLicenseActive);
                        Talk.LicenseManager.setEvalExpiring(data.licenseAttributes.isEvalExpiring);

                        var params = {
                            comment: data.comments[0],
                            isLicenseActive: Talk.LicenseManager.isLicenseActive(),
                            isEvalExpiring: Talk.LicenseManager.isEvalExpiring(),
                            hasEditPermissions: AJS.params.remoteUser && data.comments[0].userPermissions.hasEditPermission,
                            user: AJS.params.remoteUser,
                            resolved: false
                        };
                        var $comment = $(Talk.comment(params));
                        var commentIds = Talk.Comments.getIds().commentIds;
                        var commentItem = {
                            id: $.inArray("commentId=" + talkId, commentIds),
                            comment: $comment,
                            icon: icon
                        };

                        var id = commentItem.id;
                        for (var i = 0; i < id; i++) {
                            if ($('#' + commentIds[i].substring(10)).length == 0) {
                                commentItem.id--;
                            }
                        }

                        Talk.Comments.comments.splice(commentItem.id, 0, commentItem);
                        $.each(Talk.Comments.comments, function(i, item) {
                            if (item.id >= commentItem.id && item != commentItem) {
                                item.id++;
                            }
                        });

                        t.initCommentIcon(commentItem);
                        Talk.Sidebar.addComment($comment);

                        Talk.Comments.bindRelocateEvents(commentItem);
                        Talk.Events.bindCommentEvents(commentItem);
                        Confluence.Binder.userHover();
                        Talk.Comments.setActiveCommentId(commentItem.id);
                        t.relocateComments();
                        Talk.Comments.focus(Talk.Comments.getActiveCommentId(), true);

                        if (icon.hasClass('new-talk')) {
                            $comment.addClass('gd-new-editor');
                            $comment.find('.gd-reply-edit').click();

                            var cancel = $comment.find('.gd-input-cancel');
                            var input = $comment.find('.gd-input-typing .gd-input-textarea');
                            input.focus();

                            $comment.find('.gd-input-post').one('click', function() {
                                $comment.removeClass('gd-new-editor');
                                icon.removeClass('new-talk');
                                cancel.unbind('click.draft');
                            });

                            cancel.bind('click.draft', function() {
                                Talk.Comments.setActiveCommentId(0);
                                t.deleteComment(commentItem);
                                $comment.remove();
                                icon.remove();
                                $(document).click();
                                return false;
                            });

                            input.focusout(function() {
                                var data = input.serialize()
                                    + "&commentId=" + talkId
                                    + "&replyId=" + 1
                                    + "&contentId=" + getContentId();

                                Talk.REST.send({
                                    type: 'POST',
                                    resource: "comments/reply/edit",
                                    data: data});
                            });

                            AJS.Editor.addSaveHandler(function() {
                                if (!input.val()) icon.remove();
                            });
                        }
                    }
                });
            }

            setTimeout(Talk.Navigator.updateCommentsCounter, 200);
        },

        deleteComment: function(item) {
            var t = this;
            t.relocating = true;

            setTimeout(function() {
                if (t.html.find('img#icon-' + item.comment.attr('id')).length) {
                    t.relocating = false;
                    return;
                }

                item.comment.remove();

                if (Talk.Comments.getActiveCommentId() == item.id) {
                    Talk.Comments.setActiveCommentId(0);
                } else if (Talk.Comments.getActiveCommentId() > item.id) {
                    Talk.Comments.setActiveCommentId(Talk.Comments.getActiveCommentId() - 1);
                }

                Talk.Comments.comments.splice(item.id, 1);
                $.each(Talk.Comments.comments, function(i, commentItem) {
                    if (commentItem.id > item.id) {
                        commentItem.id--;
                    }
                });

                var pane = $('.gd-pane-view');

                if (pane.length == 0) {
                    $('#talk-view-item').removeClass('talks-on-page');
                    Talk.Sidebar.destroy();
                    t.html.css('min-height', "0");
                } else if ($('.gd-pane-view.talk-archived').length == pane.length && $('.talk-archived.new-replies').length == 0) {
                    Talk.Sidebar.hide(true);
                } else {
                    t.relocating = false;
                    t.relocateComments();
                }
                Talk.Navigator.updateCommentsCounter();
            }, 200);
        },

        bindDeleteCommentEvent: function(item) {
            var t = this;
            item.icon.unbind('DOMNodeRemovedFromDocument').bind('DOMNodeRemovedFromDocument', function() {
                t.deleteComment(item);
            }).unbind('click.talk-editor').bind('click.talk-editor', function() {
                setTimeout(function() {
                    $('.macro-placeholder-property-panel-remove-button').click(function() {
                        t.deleteComment(item);
                    });
                }, 200);
            });
        },

        getId: function(icon) {
            var regex = /.*?id=(talk-(\d+))/g;
            return regex.exec(icon.attr('data-macro-parameters'))[1];
        }
    };

    Talk.Compatibility = {

        fixDocumentationTheme: function() {
            if (!Talk.Helper.isEditor()) {
                var comments = Talk.Comments.comments;
                for (var i = comments.length - 1; i >= 0; i--) {
                    var item = comments[i];
                    if (!item.resolved  && item.comment.is(':visible')) {
                        var itemBottom = item.comment.offset().top + item.comment[0].clientHeight + 20;
                        var $content = Talk.Sidebar.getContent();
                        var contentBottom = $content.offset().top + $content.height();
                        var mainHeight = Math.max(contentBottom, itemBottom);
                        var $main = Talk.Helper.isZenTheme() ? $('#canvas') : Talk.Helper.isBrikitTheme() ?  $('#main-content') : $("#main");

                        mainHeight -= $main.offset().top;
                        $main.css('min-height', mainHeight + "px");
                        break;
                    }
                }
            }
        },

        fixDocumentationScrolling: function() {
            if (Talk.Helper.isDocumentationTheme() || Talk.Helper.isScrollVersions()) {
                var content = Talk.Helper.isDocumentationTheme() ? $('#splitter-content') : $('.sv-theme-content');

                content.scroll(function() {
                    Talk.Comments.relocateComments(Talk.Comments.getActiveCommentId());

                    if ($('.gd-comment-icon-insert').length > 0) {
                        Talk.Inserter.iconPosition();
                    }
                });

                $('.gd-pane-view').die("mousewheel").live("mousewheel", function(e) {
                    var delta = e.originalEvent.wheelDelta === undefined ? -40 * e.originalEvent.detail : e.originalEvent.wheelDelta;
                    content.scrollTop(content.scrollTop() - delta);
                });
            }
        },

        fix: function() {
            this.fixDocumentationScrolling();
            Talk.Editor.init();

            // Zen - Toggle Full Width Fix
            $('#expando').bind('click.talk', function() {
                Talk.Compatibility.fixZenWidth();

                setTimeout(function() {
                    Talk.GlobalEvents.resizeEventHandler();
                }, 420);
            });

            if (Talk.Helper.isZenTheme()) {
                Talk.Compatibility.fixZenWidth();
                // Zen in IE fix
                Talk.GlobalEvents.resizeEventHandler();
                this.fixZenTalkHider();
            }

            if(Talk.Helper.isScrollVersions()) {
                $('#sv-infoline-expander').click(function() {
                    setTimeout(function() {
                        Talk.Comments.relocateComments(Talk.Comments.getActiveCommentId());
                    }, 200);
                });
            }

            // Confluence 5 Default theme fir for Quick Page Edit
            AJS.unbind("init.rte.talk").bind("init.rte.talk", function(e, editor) {
                if ($(editor.editor.formElement).hasClass('editor')) {
                    var contents = $('#wysiwygTextarea_ifr').contents();
                    var talkId;
                    $.each(Talk.Comments.comments, function(i, item) {
                        if (getContentId() == item.icon.data("content-id")) {
                            talkId = item.comment.attr("id");
                            return false;
                        }
                    });

                    var waitRTELoad = function() {
                        setTimeout(function() {
                            if (contents.find('img[data-macro-parameters*="id=' + talkId + '"]').length == 0) {
                                waitRTELoad();
                            } else {
                                Talk.Comments.init();
                            }
                        }, 100);
                    };

                    Talk.Sidebar.destroy();
                    Talk.Comments.comments = [];
                    Talk.Comments.setActiveCommentId(null);

                    if (talkId) {
                        waitRTELoad();
                    } else {
                        Talk.Editor.init();
                    }
                }
            });

//          Fix Inserter
            var markers = $('[talk-marker]');
            markers.each(function(i) {
                var elm = $(this);
                if (elm.attr('talk-marker') == 'X' && markers.length > i + 1 && elm.is('p')) {
                    markers.eq(i + 1).prepend("<span>" + elm.html() + "</span>");
                    elm.empty();
                }
            });
        },

        fixZenWidth: function() {
            if (Talk.Helper.isZenTheme()) {
                var $zen = $('#zen-main');
                var width = parseInt($('#canvas').width()) - parseInt($zen.css('margin-right'));
                $zen.css('max-width', width).css('width', width);
            }
        },

        fixZenTalkHider: function() {
            $('#expando').bind('click.talk-hider', function() {
                setTimeout(function() {
                    Talk.Sidebar.relocateHider();
                }, 420);
            });
        },

        fixInPlaceEditor: function() {
            if (window.InPlaceEditor && !Talk.Helper.isEditor()) {
                window.document.location.reload();
            }
        }
    };

    Talk.Inserter = {
        marker: null,
        pageId: null,
        lineBreakId: -1,
        timeout: null,
        element: null,
        icon: null,
        commentParams: null,
        prevText: null,
        nextText: null,

        init: function() {
            if ($('#talk-insert').length == 0) {
                this.bindEvents();
                this.refresh();
            }
        },

        destroy: function() {
            this.unbindEvents();
            if (this.icon) {
                this.icon.remove();
            }
        },

        refresh: function() {
            this.marker = null;
            this.pageId = null;
            if (this.icon) {
                this.icon.remove();
            }
            $(':hover').filter('[talk-marker]').trigger('mouseenter');
        },

        bindEvents: function() {
            var t = this;
            t.timeout = null;
            t.marker = null;
            t.pageId = null;
            Talk.Compatibility.fixDocumentationScrolling();

            $("[talk-marker]").bind('mouseover.talk-insert', function(e) {
                clearTimeout(t.timeout);
                var element = $(e.target).closest('[talk-marker]');
                if (t.marker != element.attr('talk-marker') || t.pageId != element.attr('talk-page-id')) {
                    t.element = element;
                    t.timeout = setTimeout(function() {
                        t.showIcon()
                    }, 150);
                }
            }).bind('mouseleave.talk-insert', function(e) {
                clearTimeout(t.timeout);
                t.timeout = setTimeout(function() {
                    t.marker = null;
                    t.pageId = null;
                    if (t.icon) {
                        t.icon.fadeOut(50, function(){
                            t.icon.remove();
                        });
                    }
                }, 300);
            });

            Talk.Sidebar.getContent().bind('ba-resize.talk-insert', function() {
                t.refresh();
            });
        },

        unbindEvents: function() {
            $("[talk-marker]").unbind('mouseover.talk-insert').unbind('mouseleave.talk-insert');
            if (this.icon) {
                this.icon.unbind('click.talk-insert').unbind('mouseenter.talk-insert').unbind('mouseleave.talk-insert');
            }

            Talk.Sidebar.getContent().unbind('ba-resize.talk-insert');
        },

        showIcon: function() {
            var t = this;
            t.marker = t.element.attr('talk-marker');
            t.pageId = t.element.attr('talk-page-id');

            if (t.icon) {
                t.icon.fadeOut(50, function() {$(this).remove();});
            }

            t.icon = $(Talk.insertIcon({
                contentId: getContentId()
            }));
            $('body').append(t.icon);
            t.icon.fadeIn(50);

            t.iconPosition();
            t.bindIconEvents();
        },

        iconPosition: function() {
            var left, top;

            if (this.element.hasClass("talk-image")) {
                var innerElement = this.element.find('img');
                left = innerElement.offset().left + innerElement.width() + parseInt(innerElement.css('padding-left'));
                top = innerElement.offset().top + innerElement.height() - 20 + parseInt(innerElement.css('padding-top'));
            } else if (this.element.is('th')) {
                left = this.element.offset().left + this.element.outerWidth();
                top = this.element.offset().top + this.element.height() - 20 + parseInt(this.element.css('padding-top'));
            } else {
                var pointer = $(Talk.insertPointer());
                this.appendToElementWithNoLineBreaks(pointer);

                left = pointer.offset().left + 5;
                top = pointer.offset().top - 16;

                pointer.remove();
            }

            this.icon.offset({
                left: left,
                top: top
            });
        },

        bindIconEvents: function() {
            var t = this;

            t.icon.one('click.talk-insert', function() {
                clearTimeout(t.timeout);
                t.icon.removeClass('gd-comment-icon-insert');
                t.icon.remove();
                t.appendToElementWithNoLineBreaks(t.icon);
                t.unbindEvents();
                t.insertInput();

                t.icon = null;

                return false;
            }).bind('mouseenter.talk-insert', function() {
                clearTimeout(t.timeout);
            }).bind('mouseleave.talk-insert', function() {
                clearTimeout(t.timeout);
                t.timeout = setTimeout(function() {
                    t.marker = null;
                    t.icon.fadeOut(50, function(){
                        t.icon.remove();
                    });
                }, 300);
            });
        },

        insertInput: function() {
            var t = this;

            if ($('.gd-comments-sidebar').length == 0) {
                Talk.Sidebar.init();
                Talk.GlobalEvents.init();
                Talk.Compatibility.fix();
                Talk.Compatibility.fixZenWidth();
                $('#talk-view-item').addClass('talks-on-page');
            }

            if (Talk.Settings.isHidden) {
                Talk.Settings.showTalks();
            }

            var userFullName;
            var userAvatar;

            $.ajax({
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                async: false,
                type: 'GET',
                cache: false,
                url: Confluence.getContextPath() + '/rest/prototype/1/user/current',
                dataType: 'json',
                success: function(data) {
                    userFullName = data.displayName;
                    userAvatar = data.avatarUrl;
                }
            });

            var hasPermissions;

            Talk.REST.send({
                type: 'GET',
                async: false,
                resource: "permissions/default-permissions",
                data: {
                    contentId: getContentId(),
                    spaceKey: AJS.params.spaceKey
                },
                success: function(data) {
                    hasPermissions = data.permissions.users.length > 0 || data.permissions.groups.length > 0;
                    t.commentParams = data;
                }
            });

            var commentItem = {
                id: $.inArray("commentId=talk-insert", Talk.Comments.getIds().commentIds),
                comment: $(Talk.insertInputTemplate({
                    username: userFullName,
                    userAvatar: userAvatar,
                    hasPermissions: hasPermissions,
                    hasEditPermissions: AJS.params.remoteUser
                })),
                icon: $('#icon-talk-insert')
            };

            Talk.Comments.comments.splice(commentItem.id, 0, commentItem);
            $.each(Talk.Comments.comments, function(i, item) {
                if (item.id >= commentItem.id && item != commentItem) {
                    item.id++;
                }
            });

            this.bindInputEvents(commentItem);
            Talk.Navigator.updateCommentsCounter();
        },

        bindInputEvents: function(commentItem) {
            var textarea = $('.gd-input-textarea', commentItem.comment);
            Talk.Events.bindTextareaEvents(textarea);
            Talk.Events.bindPreviewEvent(commentItem.comment);
            Talk.Events.bindResizeCommentEvent(commentItem.comment);
            Talk.Events.bindUIEvents(commentItem.comment);
            Talk.Events.bindEditRestrictions(commentItem.comment);
            Talk.Events.bindNavigation(commentItem);
            Talk.Sidebar.addComment(commentItem.comment);
            Talk.Comments.bindRelocateEvents(commentItem);
            Talk.Comments.setActiveCommentId(commentItem.id);
            Talk.Comments.focus(commentItem.id, true);
            Talk.Comments.relocateComments(commentItem.id);
            Talk.Compatibility.fixDocumentationTheme();
            textarea.focus();

            $('.gd-input-post', commentItem.comment).click(function() {
                Talk.Inserter.saveComment(textarea, $(this), commentItem);
            });

            $('.gd-input-cancel', commentItem.comment).click(function() {
                Talk.Comments.removeComment(commentItem, true);
                Talk.Comments.comments.splice(commentItem.id, 1);
                $.each(Talk.Comments.comments, function(i, item) {
                    if (item.id > commentItem.id) {
                        item.id--;
                    }
                });

                if (Talk.Settings.isInsert) {
                    Talk.Inserter.bindEvents();
                }

                Talk.Inserter.prevText = null;
                Talk.Inserter.nextText = null;
            });
        },

        saveComment: function(textarea, postBtn, commentItem) {
            if (postBtn.hasClass('gd-button-disabled')) return;

            postBtn.addClass('gd-button-disabled');

            TalkParams.params = this.commentParams;
            TalkParams.initRestrictions();

            var data = {
                "reply-text": textarea.val(),
                contentId: Talk.Inserter.element.attr('talk-page-id'),
                pageVersion: Talk.Inserter.element.attr('talk-page-version'),
                elementId: Talk.Inserter.marker,
                lineBreakId: Talk.Inserter.lineBreakId,
                spaceKey: AJS.Meta.get("space-key"),
                viewableUsers: TalkParams.getNewViewableBy('user'),
                viewableGroups: TalkParams.getNewViewableBy('group')
            };
            if (Talk.Inserter.prevText) {
                data.prevText = Talk.Inserter.prevText;
            }
            if (Talk.Inserter.nextText) {
                data.nextText = Talk.Inserter.nextText;
            }

            var $spinner = $('.gd-input-spinner', commentItem.comment);
            $spinner.show();
            textarea.attr('disabled', true);

            Talk.REST.send({
                type: 'POST',
                resource: "comments/comment/insert",
                data: data,
                success: function(data) {
                    Talk.Inserter.insertNewComment(data, commentItem);
                    Talk.Inserter.prevText = null;
                    Talk.Inserter.nextText = null;
                },
                complete: function() {
                    $spinner.hide();
                    textarea.attr('disabled', false);
                }
            });
        },

        insertNewComment: function(data, commentItem) {
            Talk.LicenseManager.setLicenseActive(data.licenseAttributes.isLicenseActive);
            Talk.LicenseManager.setEvalExpiring(data.licenseAttributes.isEvalExpiring);

            var addedComment = $(Talk.comment({
                comment: data.comments[0],
                isLicenseActive: data.licenseAttributes.isLicenseActive,
                isEvalExpiring: data.licenseAttributes.isEvalExpiring,
                hasEditPermissions: AJS.params.remoteUser && data.comments[0].userPermissions.hasEditPermission,
                user: AJS.params.remoteUser,
                resolved: false
            }));

            commentItem.comment.replaceWith(addedComment);
            commentItem.comment = addedComment;
            commentItem.icon.attr('id', 'icon-' + data.comments[0].id)
                .attr('href', '#link-' + data.comments[0].id).unbind('click');

            Talk.Events.bindCommentEvents(commentItem);
            Talk.Comments.bindRelocateEvents(commentItem);
            Talk.Comments.getIds();
            Talk.Comments.setActiveCommentId(commentItem.id);
            Talk.Comments.focus(commentItem.id, true);
            Talk.Comments.relocateComments(commentItem.id);
            Talk.URLHelper.addCommentLinkToURL(commentItem.icon.attr('href'));
            Talk.Compatibility.fixDocumentationTheme();
            if (Talk.Settings.isInsert) {
                this.bindEvents();
            }
            Confluence.Binder.userHover();
            Talk.Navigator.updateCommentsCounter();
        },

        appendToElementWithNoLineBreaks: function(appendable) {
            var t = this;
            var elBrs = t.element.find('br');
            t.lineBreakId = -1;

            var iterateNodes = function(childNodes) {
                for (var j = childNodes.length - 1; j >= 0; j--) {
                    var childNode = childNodes[j];

                    if (childNode.nodeType == 3 && childNode.data.trim()) {
                        t.element.append(appendable);
                        return true;
                    } else if (childNode.nodeType == 1) {
                        if (childNode.nodeName.toLowerCase() == 'br') {
                            var elBr = elBrs.last();
                            elBr.before(appendable);
                            t.lineBreakId = elBr.filter('[talk-br]').length ? elBr.attr('talk-br') : -1;
                            return true;
                        } else if (childNode.nodeName.toLowerCase() == 'span') {
                            if (iterateNodes(childNode.childNodes)) {
                                return true;
                            }
                        } else {
                            t.element.append(appendable);
                            return true;
                        }
                    }
                }

                return false;
            };

            if (elBrs.length) {
                iterateNodes(t.element.get(0).childNodes);
            } else {
                t.element.append(appendable);
            }
        }
    };

    Talk.SelectionInserter = {

        context: null,

        init: function() {
            var self = this;
            self.context = $('#content .wiki-content').first();

            Confluence && Confluence.HighlightAction &&
            Confluence.HighlightAction.registerButtonHandler(
                "com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-insert-selection", {
                onClick: function(selectionObject) {
                    var node = self.getNode(selectionObject.range);
                    self.insertComment(node);
                },
                shouldDisplay: function(range) {
                    var end = $(range.endContainer);
                    if ($('#icon-talk-insert:not(.gd-comment-icon-insert)').length == 0 &&
                        (end.attr('talk-marker') > -1 || end.parents('[talk-marker]').length)) {
                        return Confluence.HighlightAction.WORKING_AREA.MAINCONTENT_ONLY
                    }
                    return false;
                }
            });
        },

        insertComment: function(node) {
            var prevNode = node[0];
            var prev = '';
            while (prevNode && prevNode.data) {
                prev = prevNode.data + prev;
                prevNode = prevNode.previousSibling;
            }
            Talk.Inserter.prevText = prev;

            var nextNode = node[0].nextSibling;
            var next = '';
            while(nextNode && nextNode.data) {
                next += nextNode.data;
                nextNode = nextNode.nextSibling;
            }
            Talk.Inserter.nextText = next;

            var icon = $(Talk.insertIcon({contentId: getContentId()})).removeClass('gd-comment-icon-insert');
            node.after(icon);
            Talk.Inserter.unbindEvents();
            Talk.Inserter.element = node.parents('[talk-marker]').first();
            Talk.Inserter.marker = Talk.Inserter.element.attr('talk-marker');
            Talk.Inserter.lineBreakId = -1;
            setTimeout(function() {Talk.Inserter.insertInput()}, 100);
        },

        getNode: function(range) {
            if (range.collapsed) return;

            var nodeTypes = {
                ELEMENT_NODE: 1,
                TEXT_NODE: 3
            };
            var ignoreTags = ['SCRIPT', 'STYLE', 'SELECT', 'BUTTON', 'OBJECT', 'APPLET'];
            var startContainer = range.startContainer;
            var endContainer = range.endContainer;
            var ancestor = range.commonAncestorContainer;
            var goDeeper = true;

            if (range.endOffset == 0) {
                while (!endContainer.previousSibling && endContainer.parentNode != ancestor) {
                    endContainer = endContainer.parentNode;
                }
                endContainer = endContainer.previousSibling;
            } else if (endContainer.nodeType == nodeTypes.TEXT_NODE) {
                if (range.endOffset < endContainer.nodeValue.length) {
                    endContainer.splitText(range.endOffset);
                }
            } else if (range.endOffset > 0) {
                endContainer = endContainer.childNodes.item(range.endOffset - 1);
            }

            var done = false;
            var node = startContainer;
            var result = node;

            do {
                if (goDeeper && node.nodeType == nodeTypes.TEXT_NODE) {
                    if (/\S/.test(node.nodeValue)) {
                        var nodeParent = node.parentNode;

                        if ($.contains(this.context, nodeParent) || nodeParent === this.context) {
                            result = node;
                        }
                    }

                    goDeeper = false;
                }
                if (node == endContainer && (!endContainer.hasChildNodes() || !goDeeper)) {
                    done = true;
                }
                if ($.inArray(node.tagName, ignoreTags) != -1) {
                    goDeeper = false;
                }
                if (goDeeper && node.hasChildNodes()) {
                    node = node.firstChild;
                } else if (node.nextSibling != null) {
                    node = node.nextSibling;
                    goDeeper = true;
                } else {
                    node = node.parentNode;
                    goDeeper = false;
                }
            } while (!done);

            return $(result);
        }
    };

    Talk.Settings = {
        $dialogItem: null,
        $dialog: null,
        $viewCheckbox: null,
        $insertCheckbox: null,
        isInsert: true,
        isHidden: false,
        isFeatureDiscovery: false,
        isFavFD: false,
        isLicenseActive: true,
        isEvalExpiring: false,

        init: function() {
            var t = this;
            t.$dialogItem = $('#talk-settings-dialog-item');

            if (Talk.Helper.isZenTheme()) {
                t.$dialogItem.children('span').html('');
                var itemUl = $('#toolbar-menu');
                var dialogItemLi = t.$dialogItem.parent('li');
                dialogItemLi.prev('.spacer').remove();
                dialogItemLi.remove();
                itemUl.prepend(dialogItemLi);
            }

            if (AJS.params.remoteUser) {
                Talk.REST.send({
                    type: 'GET',
                    async: false,
                    resource: "comments/settings",
                    success: function(data) {
                        t.isHidden = !data.isView && !Talk.Helper.isProfilePage();
                        t.isInsert = data.isInsert;
                        t.isFeatureDiscovery = data.isFeatureDiscovery;
                        t.isFavFD = data.isFavFD;
                        t.isLicenseActive = data.isLicenseActive;
                        t.isEvalExpiring = data.isEvalExpiring;
                    }
                });
            }

            if (t.isInsert) {
                Talk.Inserter.init();
            }

            if (t.isHidden) {
                Talk.Sidebar.hide();
            }

            t.showFeatureDiscovery();
            t.initDialog();
        },

        showFeatureDiscovery: function() {
            var t = this;

            if (!t.isFeatureDiscovery || t.$dialogItem.length == 0) {
                return;
            }

            var arrowOffsetX = 0;
            if (Talk.Helper.isZenTheme()) {
                arrowOffsetX = -6;
            } else if (Talk.Helper.isDefaultTheme() || Talk.Helper.isDocumentationTheme()) {
                arrowOffsetX = -8;
            }
            var opts = {noBind: true, offsetX: -240, arrowOffsetX: arrowOffsetX, initCallback: t.bindFeatureDiscoveryEvents};

            var popup = AJS.InlineDialog(t.$dialogItem, "talk-feature-discovery", function(contents, trigger, showPopup) {
                contents.html(Talk.featureDiscovery()) ;
                showPopup();
            }, opts);

            popup.show();
        },

        bindFeatureDiscoveryEvents: function() {
            var popup = this;
            $('#talk-feature-close').click(function() {
                popup.hide();
                Talk.REST.send({
                    type: 'POST',
                    resource: "comments/settings/feature-discovery"
                });
                return false;
            });
        },

        initDialog: function() {
            var t = this;

            t.$dialog = $(Talk.settingsDialog({
                viewChecked: t.isHidden ? "" : "checked",
                insertChecked: t.isInsert ? "checked" : "",
                isLicenseActive: t.isLicenseActive,
                isEvalExpiring: t.isEvalExpiring
            }));

            t.$viewCheckbox = t.$dialog.find('#talk-view-checkbox');
            t.$insertCheckbox = t.$dialog.find('#talk-insert-checkbox');

            var arrowOffsetX = Talk.Helper.isZenTheme() ? -6 : 0;
            var opts = {offsetX: -240, arrowOffsetX: arrowOffsetX, initCallback: t.bindDialogEvents};

            AJS.InlineDialog(t.$dialogItem, "talk-settings", function(contents, trigger, showPopup) {
                contents.html(t.$dialog) ;
                showPopup();
            }, opts);
        },

        bindDialogEvents: function() {
            var t = Talk.Settings;

            $('#talk-view-checkbox').bind('change', function() {
                if ($(this).is(':checked')) {
                    t.showTalks();
                } else {
                    t.hideTalks();
                }
            });

            $('#talk-insert-checkbox').bind('change', function() {
                if ($(this).is(':checked')) {
                    t.enableInsert();
                } else {
                    t.disableInsert();
                }
            });
        },

        toggleSidebarVisibility: function() {
            if (this.isHidden) {
                this.showTalks();
            } else {
                this.hideTalks();
            }
        },

       showTalks: function(index, focus) {
            var t = this;

            t.changeViewSettings(true);
            t.isHidden = false;
            Talk.Sidebar.show();
            t.$viewCheckbox.attr('checked', 'checked');
            Talk.Comments.focus(index || Talk.Comments.getActiveCommentId(), focus || $('.gd-comment-active').length > 0);
        },

        hideTalks: function() {
            var t = this;

            t.changeViewSettings(false);
            t.isHidden = true;
            Talk.Sidebar.hide();
            t.$viewCheckbox.removeAttr('checked');
        },

        toggleInsertSetting: function() {
            if (this.isInsert) {
                this.disableInsert();
            } else {
                this.enableInsert();
            }
        },

        enableInsert: function() {
            this.changeInsertSettings(true);
            Talk.Inserter.init();
            this.isInsert = true;
            this.$insertCheckbox.attr('checked', 'checked');
        },

        disableInsert: function() {
            this.changeInsertSettings(false);
            Talk.Inserter.destroy();
            this.isInsert = false;
            this.$insertCheckbox.removeAttr('checked');
        },

        changeInsertSettings: function(value) {
            if (!AJS.params.remoteUser) {
                return;
            }

            Talk.REST.send({
                type: 'POST',
                resource: "comments/settings/insert",
                data: {
                    value: value
                }
            });
        },

        changeViewSettings: function(value) {
            if (!AJS.params.remoteUser) {
                return;
            }

            Talk.REST.send({
                type: 'POST',
                resource: "comments/settings/view",
                data: {
                    value: value
                }
            });
        }
    };

    Talk.Restrictions = {

        showDialog: function(popup, params, commentId) {
            $('#talk-restrictions').remove();
            popup.show();
            $('.talk-permissions-dialog', popup).append(TalkPermissions.restrictionContainer());

            var saveBtn = $('.talk-save-permissions', popup);
            saveBtn.disable();

            TalkParams.params = params;
            TalkParams.initRestrictions();
            TalkPermissionManager.restoreRestrictions();
            this.changeRestrictionIcon(commentId);

            $('.remove-restriction', popup).click(function() {
                TalkPermissionManager.removeRestriction($(this));
                $('.talk-save-permissions', popup).enable();
            });

            var initAfterIsShown = function() {
                setTimeout(function() {
                    if (popup.is(':visible')) {
                        TalkPermissionManager.truncateAllRestrictions();
                        $('#talk-permissions-input', popup).focus();
                    } else {
                        initAfterIsShown();
                    }
                }, 100);
            };

            initAfterIsShown();
        },

        bindEvents: function() {
            var popup = this;
            var dialog = popup.popup;

            dialog.click(function() {
                return false;
            });

            $('.talk-save-permissions', dialog).click(function() {
                var commentId = $(this).data("commentId");
                var successIcon = $('#talk-permissions-success', dialog);
                $(this).disable();

                if (commentId == 'talk-insert') {
                    successIcon.show();
                    Talk.Inserter.commentParams = TalkParams.params;
                    Talk.Restrictions.changeRestrictionIcon(commentId);
                    setTimeout(function() {
                        successIcon.hide();
                        popup.hide();
                    }, 500);
                } else {
                    var loaderIcon =$('#talk-permissions-loader', dialog);
                    loaderIcon.show();

                    Talk.REST.send({
                        type: 'Post',
                        resource: "comments/comment/draft",
                        data: {
                            contentId: Talk.Comments.getContentId(commentId),
                            commentId: commentId,
                            viewableUsers: TalkParams.getNewViewableBy("user"),
                            viewableGroups: TalkParams.getNewViewableBy("group"),
                            oldViewableUsers: TalkParams.getOldViewableBy("user"),
                            oldViewableGroups: TalkParams.getOldViewableBy("group"),
                            question: ""
                        },
                        success: function() {
                            loaderIcon.hide();
                            successIcon.show();
                            Talk.Restrictions.changeRestrictionIcon(commentId);
                            setTimeout(function() {
                                successIcon.hide();
                                popup.hide();
                            }, 500);
                        }
                    });
                }
            });

            $('.talk-cancel-permissions', dialog).click(function() {
                popup.hide();
            });

            $('.gd-pane-view, .gd-comment-icon').click(function() {
                popup.hide();
            });

            $(document).click(function() {
                popup.hide();
            });

            AJS.bind('talkRelocate', function() {
                popup.hide();
            });

            $('#talk-permissions-input', dialog).bind("selected.autocomplete-user-or-group", function(e, data) {
                if (TalkParams.getRestriction(data.content) == undefined) {
                    $('.talk-save-permissions', dialog).enable();
                }
                TalkPermissionManager.addRestrictions($(this), data);
                $('.remove-restriction', dialog).click(function() {
                    TalkPermissionManager.removeRestriction($(this));
                    $('.talk-save-permissions', dialog).enable();
                });
            }).bind('keydown', function(e) {
                if (e.keyCode == 27){
                    var dropDown = $(this).parent().find('.aui-dropdown');
                    if (dropDown.length && !dropDown.hasClass('hidden')) {
                        dropDown.addClass('hidden');
                        return false;
                    }
                }
            });
        },

        changeRestrictionIcon: function(commentId) {
            var comment = $('#' + commentId);
            var icon = $(".talk-restrictions", comment);
            var permissions = TalkParams.getNewViewableBy("user").length + TalkParams.getNewViewableBy("group").length;

            if ($(".talk-restricted", icon).length) {
                if (permissions == 0) {
                    icon.find('.talk-restriction-icon').remove();
                    icon.append(Talk.notRestrictedIcon({hasEditPermission: true}));
                }
            } else if (permissions > 0) {
                icon.find('.talk-restriction-icon').remove();
                icon.append(Talk.restrictedIcon({hasEditPermission: true}));
            }
        }
    };

    Talk.Updater = {

        timeoutValue: 15000,
        timeout: null,
        titleTimer: null,
        isMessageSet: false,
        oldTitle: '',
        message: "(T) ",
        titleElement: $('title'),

        init: function() {
            this.timeout = setTimeout(this.update, this.timeoutValue);
        },

        update: function(async) {
            var t = Talk.Updater;
            clearTimeout(t.timeout);
            var items = Talk.Comments.comments;
            var contentIds = [];
            var commentIds = [];
            var replyIds = [];

            $.each(items, function(i, item) {
                if (item.resolved) {
                    return;
                }

                var commentId = item.comment.attr('id');
                if (commentId != "talk-insert") {
                    commentIds.push(commentId);
                    contentIds.push(Talk.Comments.getContentId(commentId));
                    replyIds.push(item.comment.find('.gd-reply').last().attr('id').replace('gd-reply-', ''));
                }
            });

            if (replyIds.length) {
                Talk.REST.send({
                    resource: "comments/updates",
                    type: 'POST',
                    async: async,
                    data: {
                        contentIds: contentIds,
                        commentIds: commentIds,
                        replyIds: replyIds
                    },
                    success: function(data) {
                        $.each(data, function(i, commentEntity) {
                            var comment = $('#' + commentEntity.id);
                            comment.addClass('new-replies');
                            var replyContainer = comment.find(".gd-reply-container");
                            var height = 0;
                            $.each(commentEntity.replies, function(i, replyEntity) {
                                var reply = $(Talk.reply({reply: replyEntity, resolved: false}));
                                reply.addClass('new-reply');
                                replyContainer.append(reply);
                                Talk.Events.bindReplyEvents(comment, reply);
                                reply.one('mouseover', function() {
                                    reply.removeClass('new-reply');
                                    if (comment.find('.new-reply').length == 0) {
                                        comment.removeClass('new-replies');
                                        if (commentEntity.archived) {
                                            Talk.Navigator.updateCommentsCounter();
                                        }
                                    }
                                    t.stopHeaderSwitching();
                                });
                                height += reply[0].clientHeight;
                            });
                            comment.scrollTop(comment[0].scrollHeight);
                            var after = comment.find('.gd-after');
                            after.css('top', after.css('top') + height);

                            comment.find('.gd-input-pane .gd-input-textarea').one('click', function() {
                                comment.find('.new-reply').removeClass('new-reply');
                                comment.removeClass('new-replies');
                                if (commentEntity.archived) {
                                    Talk.Navigator.updateCommentsCounter();
                                }
                                t.stopHeaderSwitching();
                            });

                            if (commentEntity.archived && !comment.hasClass('talk-archived')) {
                                $.each(items, function(i, item) {
                                    if (item.comment.attr('id') == commentEntity.id) {
                                        Talk.Events.styleArchive(item);
                                        return false;
                                    }
                                });
                            } else if (!commentEntity.archived && comment.hasClass('talk-archived')) {
                                $.each(items, function(i, item) {
                                    if (item.comment.attr('id') == commentEntity.id) {
                                        Talk.Events.styleRestore(item);
                                        return false;
                                    }
                                });
                            }
                        });
                        if (data.length) {
                            t.startHeaderSwitching();
                        }
                    },
                    error: function(error) {
                        AJS.log(error);
                    },
                    complete: function() {
                        t.init();
                    }
                });
            } else {
                t.init();
            }
        },

        startHeaderSwitching: function() {
            var t = Talk.Updater;

            if (!t.isMessageSet) {
                t.titleElement.text(t.message + t.titleElement.text());
                t.oldTitle = t.titleElement.text();
                t.isMessageSet = true;
                var checkTitle = function() {
                    t.titleTimer = setTimeout(function() {
                        if (t.oldTitle != t.titleElement.text() ) {
                            t.titleElement.text(t.message + t.titleElement.text());
                            t.oldTitle = t.titleElement.text();
                        }
                        checkTitle();
                    }, 1000);
                };
                checkTitle();
            }
        },

        stopHeaderSwitching: function() {
            var t = Talk.Updater;
            if (t.isMessageSet && $('.new-reply').length == 0) {
                clearTimeout(t.titleTimer);
                t.isMessageSet = false;
                t.titleElement.text(t.titleElement.text().replace(t.message, ''));
            }
        }
    };

    Talk.Navigator = {

        isArchivedNavigable: false,

        init: function() {
            var t = this;
            $('#talk-up').click(t.up);
            $('#talk-down').click(t.down);
            t.isArchivedNavigable = Talk.Helper.isProfilePage();
        },

        down: function() {
            return Talk.Navigator.navigate(1);
        },

        up: function() {
            return Talk.Navigator.navigate(-1);
        },

        navigate: function(n) {
            if (!Talk.Sidebar.sidebar || !Talk.Navigator.isCommentsExists()) {
                return;
            }

            var index = Talk.Comments.getActiveCommentId();
            if (Talk.Comments.focusedCommentId != index) {
                index -= n;
            }

            do {
                index += n;
                if (index < 0) {
                    index = Talk.Comments.comments.length - 1;
                } else if (index >= Talk.Comments.comments.length) {
                    index = 0;
                }
            } while (!Talk.Navigator.isCommentNavigable(Talk.Comments.comments[index]));

            Talk.Comments.comments[index].comment.click();

            return false;
        },

        updateCommentsCounter: function() {
            var n = 1;
            for (var i = 0; i < Talk.Comments.comments.length; i++) {
                if (Talk.Navigator.isCommentNavigable(Talk.Comments.comments[i])) {
                    Talk.Comments.comments[i].comment.find('.gd-position').html(n);
                    n++;
                }
            }
            $('.gd-total-count').html(n - 1);
        },

        isCommentsExists: function() {
            for (var i = 0; i < Talk.Comments.comments.length; i++) {
                if (Talk.Navigator.isCommentNavigable(Talk.Comments.comments[i])) {
                    return true;
                }
            }
            return false;
        },

        isCommentNavigable: function(item) {
            return !item.resolved && (Talk.Navigator.isArchivedNavigable || !item.comment.hasClass('talk-archived') || item.comment.hasClass('new-replies'));
        }
    };

    function getContentId() {
        return AJS.params.contentId || AJS.Meta.get("content-id") || AJS.params.pageId || AJS.Meta.get("page-id");
    }

    AJS.toInit(function() {
        Talk.Helper.init();
        Talk.Comments.init();
        Talk.Settings.init();
        Talk.Updater.init();
        Talk.SelectionInserter.init();

        AJS.bind('cipe.init', function() {
            Talk.Comments.init();
            Talk.Settings.init();
        });
    });

})(jQuery);
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'soy/talk.soy' */
// This file was automatically generated from talk.soy.
// Please don't edit this file by hand.

if (typeof Talk == 'undefined') { var Talk = {}; }


Talk.comment = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  var class__soy3 = new soy.StringBuilder((opt_data.comment.userPermissions.hasEditPermission && ! opt_data.resolved) ? 'editable' : '');
  class__soy3 = class__soy3.toString();
  var classArchived__soy7 = new soy.StringBuilder((opt_data.comment.archived) ? 'talk-archived' : '');
  classArchived__soy7 = classArchived__soy7.toString();
  output.append('<div id="', opt_data.comment.id, '" class="gd-pane-view ', class__soy3, ' ', classArchived__soy7, '"><div class="gd-arrow-outer"></div><div class="gd-arrow-inner"></div><div class="gd-tools-container"><div class="gd-navigator-container"><div class="aui-icon aui-icon-small talk-navigator talk-up" title="', "Previous talk (press 8)", '"></div><div class="aui-icon aui-icon-small talk-navigator talk-down" title="', "Next talk (press 2)", '"></div><span class="gd-position-counter"><span class="gd-position"></span> ', "of", ' <span class="gd-total-count"></span></span></div><span class="talk-restrictions ', class__soy3, '">');
  if (opt_data.user) {
    if (opt_data.comment.favorite) {
      Talk.favoriteIcon(null, output);
    } else {
      Talk.notFavoriteIcon(null, output);
    }
  }
  if (opt_data.comment.hasPermissions) {
    Talk.restrictedIcon({hasEditPermission: opt_data.hasEditPermissions && ! classArchived__soy7 && ! opt_data.resolved}, output);
  } else {
    if (opt_data.hasEditPermissions && ! opt_data.resolved) {
      Talk.notRestrictedIcon(null, output);
    }
  }
  output.append('</span>', (opt_data.comment.userPermissions.hasEditPermission && ! opt_data.resolved) ? '<div class="gd-manage-button gd-resolve-button"><div class="gd-inline-block gd-button gd-button-standard" title="' + "\u041e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0435 \u0438 \u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f" + '">' + "\u0412\u043e\u043f\u0440\u043e\u0441 \u0440\u0435\u0448\u0435\u043d" + '</div></div><div class="gd-manage-button gd-restore-button"><div class="gd-inline-block gd-button gd-button-standard" title="' + "\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u0438\u0437 \u0430\u0440\u0445\u0438\u0432\u0430" + '">' + "\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c" + '</div></div>' : '', '</div><div class="gd-content gd-reply-container">');
  var replyList54 = opt_data.comment.replies;
  var replyListLen54 = replyList54.length;
  for (var replyIndex54 = 0; replyIndex54 < replyListLen54; replyIndex54++) {
    var replyData54 = replyList54[replyIndex54];
    Talk.reply({reply: replyData54, resolved: opt_data.resolved}, output);
    output.append((replyIndex54 == 0) ? '<div class="gd-content-collapser"><div title="' + "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043e\u0442\u0432\u0435\u0442\u044b" + '" class="gd-comment-show-all gd-inline-block">' + AJS.format("\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \x3cspan\x3e{0}\x3c/span\x3e \u0441\u043a\u0440\u044b\u0442\u044b\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432",opt_data.comment.replies.length - 2) + '</div></div>' : '');
  }
  output.append('</div>');
  if (opt_data.comment.userPermissions.hasCreatePermission && ! opt_data.resolved) {
    Talk.addReply(opt_data, output);
  }
  if (! opt_data.isLicenseActive) {
    Talk.license(null, output);
  }
  output.append('<div id="error-', opt_data.comment.id, '" class="gd-error-container"></div><div class="gd-after"></div></div>');
  return opt_sb ? '' : output.toString();
};


Talk.reply = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div id="gd-reply-', opt_data.reply.id, '" class="gd-reply"><img width="24" height="24" src="', opt_data.reply.userInfo.profilePicturePath, '" class="gd-user-icon"><div class="gd-reply-author">', opt_data.reply.userInfo.username, '</div><div class="gd-reply-timestamp">', opt_data.reply.dateTime, '</div><div class="gd-reply-collapsible"><div class="gd-reply-body gd-reply-html">', opt_data.reply.htmlText, '</div><div class="gd-reply-preview gd-reply-html" style="display: none"></div></div><div class="gd-long-reply-blur"></div><div class="gd-reply-control gd-inline-block">', (opt_data.reply.hasEditPermission && ! opt_data.resolved) ? '<div title="' + "\u0412\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439" + '" class="gd-reply-edit gd-inline-block">' + "\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c" + '</div><div title="' + "\u041e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f" + '" class="gd-reply-delete gd-inline-block">' + "\u0423\u0434\u0430\u043b\u0438\u0442\u044c" + '</div>' : '', '<div title="', "\u0421\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439", '" class="gd-reply-show-less gd-inline-block">', "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435", '</div><div title="', "\u0420\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439", '" class="gd-reply-show-more gd-inline-block">', "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435", '</div></div>', (opt_data.reply.hasEditPermission && ! opt_data.resolved) ? '<div class="gd-input" style="display: none;"><div style="display: none" class="gd-input-spinner"></div><textarea name="reply-text" class="gd-input-textarea"></textarea><textarea class="gd-input-textarea-markup">' + opt_data.reply.text + '</textarea><div class="gd-input-buttons"><div title="' + "\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f" + '" class="gd-inline-block gd-button gd-button-standard gd-input-preview gd-input-active">' + "\u041f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440" + '</div><div title="' + "\u0412\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439" + '" class="gd-inline-block gd-button gd-button-standard gd-input-edit">' + "\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c" + '</div><div title="' + "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (Ctrl+Enter)" + '" class="gd-inline-block gd-button gd-button-action gd-input-post gd-input-active"><span class="gd-input-buttons-post">' + "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c" + '</span></div><a title="' + "\u041e\u0442\u043c\u0435\u043d\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f" + '" class="gd-inline-block gd-button gd-input-cancel">' + "\u041e\u0442\u043c\u0435\u043d\u0430" + '</a></div></div>' : '', '</div>');
  return opt_sb ? '' : output.toString();
};


Talk.license = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div class="gd-input gd-input-pane gd-no-license">', "\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430 Talk \u043d\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u0430. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c 30-\u0434\u043d\u0435\u0432\u043d\u0443\u044e \u043f\u0440\u043e\u0431\u043d\u0443\u044e \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e \u0438\u043b\u0438 \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0441\u0442\u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u043b\u0430\u0433\u0438\u043d\u0430 \u043d\u0430 \x3ca href\x3d\x22https://marketplace.atlassian.com/plugins/com.stiltsoft.confluence.talk.confluence-talk-plugin\x22\x3eAtlassian Marketplace\x3c/a\x3e.", '</div>');
  return opt_sb ? '' : output.toString();
};


Talk.addReply = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div class="gd-input gd-input-pane"><div class="gd-reply-collapsible"><div class="gd-reply-preview gd-reply-html" style="display: none"></div></div>', (opt_data.isEvalExpiring) ? '<div class="gd-eval-expiring">' + "\u0421\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0431\u043d\u043e\u0439 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430 Talk \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043a \u043a\u043e\u043d\u0446\u0443. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0430\u0441\u044c \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u044d\u0442\u0438\u043c \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u043c, \u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0441\u0442\u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0443\u044e \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e \u043d\u0430 \x3ca href\x3d\x22https://marketplace.atlassian.com/plugins/com.stiltsoft.confluence.talk.confluence-talk-plugin\x22\x3eAtlassian Marketplace\x3c/a\x3e." + '</div>' : '', '<div style="display: none;" class="gd-input-spinner"></div><textarea name="reply-text" class="gd-input-textarea">', "\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439...", '</textarea><div class="gd-input-buttons"><div title="', "\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f", '" class="gd-inline-block gd-button gd-button-standard gd-input-preview gd-input-active gd-button-disabled">', "\u041f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440", '</div><div title="', "\u0412\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439", '" class="gd-inline-block gd-button gd-button-standard gd-input-edit" style="display: none">', "\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c", '</div><div class="gd-inline-block gd-button gd-button-action gd-input-post gd-input-active gd-button-disabled" title="', "\u041e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 (Ctrl+Enter)", '"><span class="gd-input-buttons-post">', "\u041e\u0442\u0432\u0435\u0442\u0438\u0442\u044c", '</span></div><a title="', "\u041e\u0442\u043c\u0435\u043d\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f", '" class="gd-inline-block gd-button gd-input-cancel">', "\u041e\u0442\u043c\u0435\u043d\u0430", '</a></div></div>');
  return opt_sb ? '' : output.toString();
};


Talk.resolveCommentConfirmation = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  Talk.confirmation({position: 'top', question: soy.$$escapeHtml("\u041e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u0432\u043e\u043f\u0440\u043e\u0441 \u043a\u0430\u043a \u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0439?"), confirmBtn: soy.$$escapeHtml("\u0423\u0434\u0430\u043b\u0438\u0442\u044c"), confirmBtnTitle: soy.$$escapeHtml("\u041e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0435 \u0438 \u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f"), altActionBtn: soy.$$escapeHtml("\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c"), altActionBtnTitle: soy.$$escapeHtml("\u041e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0438 \u0441\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f")}, output);
  return opt_sb ? '' : output.toString();
};


Talk.restoreCommentConfirmation = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  Talk.confirmation({position: 'top', question: soy.$$escapeHtml("\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435?"), confirmBtn: soy.$$escapeHtml("\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c"), confirmBtnTitle: soy.$$escapeHtml("\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u0438\u0437 \u0430\u0440\u0445\u0438\u0432\u0430")}, output);
  return opt_sb ? '' : output.toString();
};


Talk.deleteReplyConfirmation = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  Talk.confirmation({position: 'bottom', question: soy.$$escapeHtml("\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439?"), confirmBtn: soy.$$escapeHtml("\u0423\u0434\u0430\u043b\u0438\u0442\u044c"), confirmBtnTitle: soy.$$escapeHtml("\u0423\u0434\u0430\u043b\u0438\u0442\u044c")}, output);
  return opt_sb ? '' : output.toString();
};


Talk.confirmation = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<table id="gd-shadow" class="', soy.$$escapeHtml(opt_data.position), '"><tbody><tr><td><table><tbody><tr><td><div id="gd-shadow-description">', soy.$$escapeHtml(opt_data.question), '</div></td></tr><tr><td><table class="shadow-buttons-table"><tbody><tr><td><div class="gd-inline-block gd-button gd-button-standard" id="gd-shadow-confirm" title="', soy.$$escapeHtml(opt_data.confirmBtnTitle), '">', soy.$$escapeHtml(opt_data.confirmBtn), '</div></td><td><div class="gd-inline-block gd-button gd-button-standard" id="gd-shadow-cancel">', soy.$$escapeHtml("\u041e\u0442\u043c\u0435\u043d\u0430"), '</div></td</tr>', (opt_data.altActionBtn) ? '<tr><td style="padding-top: 10px"><div class="gd-inline-block gd-button gd-button-standard" id="gd-shadow-alt" title="' + soy.$$escapeHtml(opt_data.altActionBtnTitle) + '">' + soy.$$escapeHtml(opt_data.altActionBtn) + '</div></td><td></td></tr>' : '', '</tbody></table></td></tr></tbody></table></td></tr></tbody></table>');
  return opt_sb ? '' : output.toString();
};


Talk.insertPointer = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<span id="talk-insert-pointer"></span>');
  return opt_sb ? '' : output.toString();
};


Talk.insertIcon = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<span id="icon-talk-insert" href="#link" class="gd-comment-icon gd-comment-icon-active gd-comment-icon-insert" data-content-id="', soy.$$escapeHtml(opt_data.contentId), '"><span><span data-count="1"></span></span></span>');
  return opt_sb ? '' : output.toString();
};


Talk.insertInputTemplate = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div id="talk-insert" class="gd-pane-view gd-comment-active"><div class="gd-arrow-outer"></div><div class="gd-arrow-inner"></div><div class="gd-tools-container"><div class="gd-navigator-container"><div class="aui-icon aui-icon-small aui-iconfont-arrow-up talk-navigator talk-up" title="', soy.$$escapeHtml("Previous talk (press 8)"), '"></div><div class="aui-icon aui-icon-small aui-iconfont-arrow-down talk-navigator talk-down" title="', soy.$$escapeHtml("Next talk (press 2)"), '"></div><span class="gd-position-counter"><span class="gd-position"></span> ', soy.$$escapeHtml("of"), ' <span class="gd-total-count"></span></span></div><span class="talk-restrictions editable">');
  if (opt_data.hasPermissions) {
    Talk.restrictedIcon({hasEditPermission: opt_data.hasEditPermissions}, output);
  } else {
    Talk.notRestrictedIcon(null, output);
  }
  output.append('</span></div><div class="gd-reply"><img width="24" height="24" src="', soy.$$escapeHtml(opt_data.userAvatar), '" class="gd-user-icon"><div class="gd-reply-author">', soy.$$escapeHtml(opt_data.username), '</div><div class="gd-reply-collapsible"><div class="gd-reply-preview gd-reply-html" style="display: none"></div></div></div><div class="gd-input gd-input-pane gd-input-typing" style="display: block"><div style="display: none" class="gd-input-spinner"></div><textarea name="reply-text" class="gd-input-textarea"></textarea><div class="gd-input-buttons"><div title="', soy.$$escapeHtml("\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f"), '" class="gd-inline-block gd-button gd-button-standard gd-input-preview gd-input-active gd-button-disabled">', soy.$$escapeHtml("\u041f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440"), '</div><div title="', soy.$$escapeHtml("\u0412\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439"), '" class="gd-inline-block gd-button gd-button-standard gd-input-edit" style="display: none">', soy.$$escapeHtml("\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c"), '</div><div title="', soy.$$escapeHtml("\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (Ctrl+Enter)"), '" class="gd-inline-block gd-button gd-button-action gd-input-post gd-input-active gd-button-disabled"><span class="gd-input-buttons-post">', soy.$$escapeHtml("\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c"), '</span></div><a title="', soy.$$escapeHtml("\u041e\u0442\u043c\u0435\u043d\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f"), '" class="gd-inline-block gd-button gd-input-cancel">', soy.$$escapeHtml("\u041e\u0442\u043c\u0435\u043d\u0430"), '</a></div></div><div id="error-talk-insert" class="gd-error-container"></div><div class="gd-after"></div></div>');
  return opt_sb ? '' : output.toString();
};


Talk.hiderContainer = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div id="talk-show-hide-container"><div id="talk-up" class="aui-icon aui-icon-small talk-navigator" title="', soy.$$escapeHtml("Previous talk (press 8)"), '"></div><div id="talk-down" class="aui-icon aui-icon-small talk-navigator" title="', soy.$$escapeHtml("Next talk (press 2)"), '"></div></div>');
  return opt_sb ? '' : output.toString();
};


Talk.hider = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div id="talk-hider" title="', soy.$$escapeHtml("\u0421\u043a\u0440\u044b\u0442\u044c Talk-\u0438 ( ] )"), '"></div>');
  return opt_sb ? '' : output.toString();
};


Talk.shower = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div id="talk-shower" title="', soy.$$escapeHtml("\u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c Talk-\u0438 ( ] )"), '"></div>');
  return opt_sb ? '' : output.toString();
};


Talk.restrictedIcon = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  var title__soy268 = new soy.StringBuilder((opt_data.hasEditPermission) ? soy.$$escapeHtml("\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0438\u0441\u043a\u0443\u0441\u0441\u0438\u0438") + ' ' + soy.$$escapeHtml("\u041a\u043b\u0438\u043a\u043d\u0438\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c/\u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430") : soy.$$escapeHtml("\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0438\u0441\u043a\u0443\u0441\u0441\u0438\u0438") + ' ' + soy.$$escapeHtml("\u041a\u043b\u0438\u043a\u043d\u0438\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430"));
  title__soy268 = title__soy268.toString();
  output.append('<span class="talk-restriction-icon talk-restricted" title="', soy.$$escapeHtml(title__soy268), '"></span>');
  return opt_sb ? '' : output.toString();
};


Talk.notRestrictedIcon = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<span class="talk-restriction-icon talk-not-restricted" title="', soy.$$escapeHtml("\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0438\u0441\u043a\u0443\u0441\u0441\u0438\u0438 \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d. \u041a\u043b\u0438\u043a\u043d\u0438\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0434\u0430\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f."), '"></span>');
  return opt_sb ? '' : output.toString();
};


Talk.favoriteIcon = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<span class="talk-favorite-icon aui-icon aui-icon-small talk-star" title="', soy.$$escapeHtml("Remove from favourites"), '"></span>');
  return opt_sb ? '' : output.toString();
};


Talk.notFavoriteIcon = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<span class="talk-favorite-icon aui-icon aui-icon-small talk-unstar" title="', soy.$$escapeHtml("Add to favourites"), '"></span>');
  return opt_sb ? '' : output.toString();
};


Talk.permissionsDialog = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  var class__soy294 = new soy.StringBuilder((! opt_data.editable) ? 'not-editable' : '');
  class__soy294 = class__soy294.toString();
  output.append('<div class="talk-permissions-dialog ', soy.$$escapeHtml(class__soy294), '">', (opt_data.editable) ? '<input id="talk-permissions-input" class="autocomplete-user-or-group talk-macro-field" type=\'text\' data-none-message="' + soy.$$escapeHtml("\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d") + '" placeholder="' + soy.$$escapeHtml("\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u0433\u0440\u0443\u043f\u043f\u044b") + '"/><div class="talk-permissions-dialog-buttons"><button class="aui-button aui-button-primary talk-save-permissions" data-comment-id="' + soy.$$escapeHtml(opt_data.commentId) + '">' + soy.$$escapeHtml("\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c") + '</button><a href="#" class="talk-cancel-permissions">' + soy.$$escapeHtml("\u041e\u0442\u043c\u0435\u043d\u0438\u0442\u044c") + '</a><div id="talk-permissions-loader" class="talk-action-status aui-icon-wait"></div><div id="talk-permissions-success" class="talk-action-status aui-icon aui-icon-success"></div></div>' : soy.$$escapeHtml("\u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043d\u0438\u0436\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0438 \u0433\u0440\u0443\u043f\u043f\u044b \u043c\u043e\u0433\u0443\u0442 \u0432\u0438\u0434\u0435\u0442\u044c \u044d\u0442\u0443 \u0434\u0438\u0441\u043a\u0443\u0441\u0441\u0438\u044e:"), '</div>');
  return opt_sb ? '' : output.toString();
};


Talk.editorMacro = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<img class="editor-inline-macro gd-comment-icon new-talk" height="16" width="16" src="', soy.$$escapeHtml(""), '/download/resources/com.stiltsoft.confluence.talk.confluence-talk-plugin/images/talk.png" data-macro-name="talk" data-macro-parameters="id=', soy.$$escapeHtml(opt_data.commentId), '" data-mce-src="', soy.$$escapeHtml(""), '/download/resources/com.stiltsoft.confluence.talk.confluence-talk-plugin/images/talk.png">');
  return opt_sb ? '' : output.toString();
};

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.stiltsoft.confluence.talk.confluence-talk-plugin:talk-resources', location = 'soy/talk-dialog.soy' */
// This file was automatically generated from talk-dialog.soy.
// Please don't edit this file by hand.

if (typeof Talk == 'undefined') { var Talk = {}; }


Talk.settingsDialog = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div><h2>', "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 Talk", '</h2><p>', "\u042d\u0442\u043e \u0432\u0430\u0448\u0438 \u043b\u0438\u0447\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f Talk:", '</p></div><form class="aui"><div class="checkbox"><input class="checkbox" type="checkbox" id="talk-view-checkbox" ', opt_data.viewChecked, '><label for="talk-view-checkbox">', "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0431\u043e\u043a\u043e\u0432\u0443\u044e \u043f\u0430\u043d\u0435\u043b\u044c \u0434\u0438\u0441\u043a\u0443\u0441\u0441\u0438\u0439 ( ] )", '</label></div><div class="checkbox"><input class="checkbox" type="checkbox" id="talk-insert-checkbox" ', opt_data.insertChecked, '><label for="talk-insert-checkbox">', "\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0438\u0441\u043a\u0443\u0441\u0441\u0438\u0439 (d)", '</label></div><br><a href="https://docs.stiltsoft.com/display/Talk/Getting+Started?from=on-page-settings" target="_blank">', "\u0423\u0437\u043d\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435", '</a><a href="https://stiltsoft.customercase.com/forums/talk-for-confluence?sort=top" target="_blank" style="float: right">', "\u0417\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c", '</a>', (! opt_data.isLicenseActive) ? '<div class="talk-dialog-no-license">' + "\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430 Talk \u043d\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u0430. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c 30-\u0434\u043d\u0435\u0432\u043d\u0443\u044e \u043f\u0440\u043e\u0431\u043d\u0443\u044e \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e \u0438\u043b\u0438 \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0441\u0442\u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u043b\u0430\u0433\u0438\u043d\u0430 \u043d\u0430 \x3ca href\x3d\x22https://marketplace.atlassian.com/plugins/com.stiltsoft.confluence.talk.confluence-talk-plugin\x22\x3eAtlassian Marketplace\x3c/a\x3e." + '</div>' : '', (opt_data.isEvalExpiring) ? '<div class="talk-dialog-no-license">' + "\u0421\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0431\u043d\u043e\u0439 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430 Talk \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043a \u043a\u043e\u043d\u0446\u0443. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0430\u0441\u044c \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u044d\u0442\u0438\u043c \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u043c, \u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0441\u0442\u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0443\u044e \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e \u043d\u0430 \x3ca href\x3d\x22https://marketplace.atlassian.com/plugins/com.stiltsoft.confluence.talk.confluence-talk-plugin\x22\x3eAtlassian Marketplace\x3c/a\x3e." + '</div>' : '', '</form>');
  return opt_sb ? '' : output.toString();
};


Talk.featureDiscovery = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div><h2>', "\u0427\u0442\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u0432 Talk 2.0-2.1?", '</h2>', "\x3cul\x3e\x3cli\x3eView, manage and reply to talks in the editor.\x3c/li\x3e\x3cli\x3eCollapsing of long comments and discussions.\x3cbr/\x3eClick a collapsed discussion to expand it.\x3c/li\x3e\x3cli\x3eNew hotkeys in the editor:\x3cbr/\x3eInsert Talk (Ctrl+Alt+D)\x3cbr/\x3eSave your comment (Ctrl+Enter)\x3c/li\x3e\x3c/ul\x3e\x3cp\x3e\x3ca href\x3d\x22https://docs.stiltsoft.com/pages/viewpage.action?spaceKey\x3dTalk\x26title\x3dTalk+for+Confluence+2.5.0\x26from\x3dfeature-discovery\x22 target\x3d\x22_blank\x22\x3eLearn more\x3c/a\x3e\x3c/p\x3e", '</div><form class="aui"><button id="talk-feature-close" class="aui aui-button">', "\u0417\u0430\u043a\u0440\u044b\u0442\u044c", '</button><a href="https://docs.stiltsoft.com/display/Talk/Getting+Started?from=feature-discovery" target="_blank" style="float: right; line-height: 30px">', "\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Talk?", '</a></form>');
  return opt_sb ? '' : output.toString();
};


Talk.favFD = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div><h2>', "Added to Favourite talks", '</h2><p>', "To view the page with your favourite talks, go to Profile \x26gt; Favourite talks.", '</p><p><a href="#" id="talk-fav-fd-showme">', "Show me", '</a></p></div>');
  return opt_sb ? '' : output.toString();
};


Talk.favFDEnd = function(opt_data, opt_sb) {
  var output = opt_sb || new soy.StringBuilder();
  output.append('<div><p>', "Managing and keeping track of your favourite talks is easy when they are all in one place.", '</p><p><a href="#" id="talk-fav-feature-close">', "OK, got it", '</a></p></div>');
  return opt_sb ? '' : output.toString();
};

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.atlassian.confluence.plugins.view-source:view-source-menu-resources', location = 'com/atlassian/confluence/plugins/viewsource/js/viewsource.js' */
AJS.toInit(function ($) {
    $("#action-view-source-link").click(function (e) {
        window.open(this.href, (this.id + "-popupwindow").replace(/-/g, "_"), "width=800, height=600, scrollbars, resizable");
            e.preventDefault();
            return false;
        });
});
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'com.atlassian.confluence.plugins.view-storage-format:view-storage-menu-resources', location = 'com/atlassian/confluence/plugins/viewstorage/js/viewstorage.js' */
AJS.toInit(function ($) {
    $(".view-storage-link, .view-storage-link a").click(function (e) {
        window.open(this.href, (this.id + "-popupwindow").replace(/-/g, "_"), "width=800, height=600, scrollbars, resizable");
            e.preventDefault();
            return false;
        });
});

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


try {
/* module-key = 'confluence.macros.core:flash-autosize', location = 'javascript/flash-autosize.js' */
AJS.toInit(function($) {
    function autoSize(embeds, attempt) {
        var retry;

        if(attempt >= 20) { // 2 sec
            AJS.log('unable to auto size flash - took too long to load');
            return;
        }

        retry = $([]);

        embeds.each(function() {
            var $e = $(this);
            var h, w;
            if(this.GetVariable) {
                // Only set width/height is not already set
                if(!$e.attr("height")) {
                    h = this.GetVariable("height");
                    if(h) {
                        $e.height(h);
                    } else {
                        retry = retry.add($e);
                        return;
                    }
                }
                if(!$e.attr("width")) {
                    w = this.GetVariable("width");
                    if(w) {
                        $e.width(w);
                    } else {
                        retry = retry.add($e);
                        return;
                    }
                }
            }
        });

        if(retry.length) {
            setTimeout(function() {
                autoSize(retry, attempt + 1);
            }, 100);
        }
    }

    autoSize($('embed[type="application/x-shockwave-flash"]'), 0);

    // For preview
    $(window).bind("render-content-loaded", function(e, body) {
        autoSize($('embed[type="application/x-shockwave-flash"]', body), 0);
    });
});

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}


