# ===== [Строки] =====

string.split(' ', 2) - деление по разделителю с начала
string.rsplit(' ', 2) - деление по разделителю с конца
string.strip() - удаление пробельных символов с начала и конца строки
string.rstrip() - удаление пробельных символов с конца строки
string.lstrip() - удаление пробельных символов с начала строки
string.replace('1', '2', maxcount=2) - меняет одну подстроку на другую
string.lower() - приведение всех букв к нижнему регистру
string.count('sub', start=2, end=10) - подсчёт вхождений подстроки
string.find('bar') - поиск индекса первого вхождения (-1 если не найдено)
string.rfind('bar') - поиск индекса последнего вхождения (-1 если не найдено)
string.splitlines() - превращает текст в список строк по символу переноса строки
','.join(list) - соединяет в строку с разделителями

string.isspace() - является ли строка пробельной
string.isalnum() - состоит ли строка только из цифр/букв
string.isdigit() - состоит ли строка только из цифр
string.isalpha() - состоит ли строка только из букв
string.startswith('The') - начинается ли строка с 'The'
string.endswith('end.') - заканчивается ли строка на 'end.'

string.format('1', '2') - подстановка
'Int is %d, String is %s, Float is %f' % (2, 'Roman', 2.12) - подстановка
f"Current value is {value}" - подстановка

# ===== [Регулярные выражения] =====

. - Один любой символ, кроме новой строки \n.
? - 0 или 1 вхождение шаблона слева
+ - 1 и более вхождений шаблона слева
* - 0 и более вхождений шаблона слева
\w - Любая цифра или буква
\W - Все, кроме буквы или цифры
\d - Любая цифра [0-9]
\D - Все, кроме цифры
\s - Любой пробельный символ
\S - Любой непробельный символ
\b - Граница слова
[..] - Один из символов в скобках
[^..] - Любой символ, кроме тех, что в скобках
\ - Экранирование специальных символов (\. означает точку или \+ — знак «плюс»)
^ и $ - Начало и конец строки соответственно
{n,m} - От n до m вхождений ({,m} — от 0 до m)
a|b - Соответствует a или b
() - Группирует выражение и возвращает найденный текст
\t, \n, \r - Символ табуляции, новой строки и возврата каретки

match = re.match(r'\S+', string).group(0) - поиск вхождения в начале строки
search = re.search(r'\S+', string).group(0) - поиск вхождения во всей строке
findall = re.findall(r'\S+', string) - поиск всех вхождений
split = re.split(r'\s+', string) - разделение строки по шаблону
sub = re.sub(r'\s+', '_', string) - замена шаблона на подстроку

# ===== [Списки] =====

list.insert(i, value) - вставляет на i-тое место значение
list.remove(value) - удаляет первый элемент со значением value
list.pop(i) - удаляет i-тый элемент и возвращает его
list.index(value) - находит индекс первого элемента со значением value
list.count(value) - подсчёд элементов со значением value
list.reverse() - переворачивает список

# ===== [Словари] =====

dict.copy() - копирует словарь
dict.get(key) - возвращает значение ключа (None если такого нет)
dict.items() - возвращает пары (ключ, значение)
dict.setdefault(key, value) - возвращает значение ключа, а если такого нет - создает ключ со значением value
dict.update(new_dict) - обновляет словарь, добавляя все пары из new_dict

# ===== [Множества] =====

set.add(value) - добавление элемента
set.remove(value) - удаление элемента (ошибка, если его нет)
set.discard(value) - удаление элемента (даже если его нет)
set.copy() - копирует множество
set.union(new_set, new_set2...) - объединение множеств
set.intersection(new_set, new_set2...) - пересечение множеств
set.difference(new_set, new_set2...) - вычитание множеств
set.update(new_set, new_set2...) - объединение множеств (с изменением set)
set.intersection_update(new_set, new_set2...) - пересечение множеств (с изменением set)
set.difference_update(new_set, new_set2...) - вычитание множеств (с изменением set)

# ===== [Массовые фичи] =====

dict(zip(keys, values)) - создание словаря из двух списков
list(iter(input, "")) - многострочный ввод, пока не будет пустой строки
iter(input, "") - вызывается функция до тех пор, пока возвращаемое значение не будет равно ""
list(map(int, old_list)) - применяет функцию int ко всем элементам old_list
list(filter(lambda x: x % 2 == 0, old_list)) - фильтрует список по условию
lambda x: x[1] + x[2] - быстрая функция (принимает x, возвращает x[1] + x[2])

new_list = (old_list[i]*2 for i in range(len(old_list))) - генератор списка
new_dict = {i: list1[i] + list2[i] for i in range min(len(list1), len(list2))} - генератор словаря
new_list = [old_list[i]*2 for i in range(len(old_list))] - list comprehension

new_dict = sorted(old_dict.items(), key = lambda item: item[0]) - сортировка словаря по ключам
new_list = sorted(old_list, key = lambda x: x[1]) - сортировка списка по второму элементу каждого из элементов

# ===== [Другое] =====

isinstance(1, int) - проверяет объект на его тип/класс
for key, value in dict.items(): - для итерации ключей и значений в словаре
max() - находит максимальное в итерируемом
min() - находит минимальное в итерируемом
sum() - сумма элементов
with open('filename.txt', 'r', encoding='utf-8', errors='ignore') as file - открыть файл
	string = file.read() - чтение содержимого файла
return value if value >= 0 else -value - тернарный оператор (короткое условие)

abs(-265) - модуль числа
pow(2,10) - возводит число в степень
round(2.66, 1) - округление числа

help() - справка о функции